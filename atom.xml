<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>svnscha</title>
    <subtitle>automating annoying tasks, sharing tips, and embracing less frustration</subtitle>
    <link rel="self" type="application/atom+xml" href="https://svnscha.de/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://svnscha.de"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-08-26T00:00:00+00:00</updated>
    <id>https://svnscha.de/atom.xml</id>
    <entry xml:lang="en">
        <title>Get Started with uberAgent for Linux: Enterprise Observability Made Simple</title>
        <published>2025-08-26T00:00:00+00:00</published>
        <updated>2025-08-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/posts/citrix-uberagent-getting-started-linux/"/>
        <id>https://svnscha.de/posts/citrix-uberagent-getting-started-linux/</id>
        
        <content type="html" xml:base="https://svnscha.de/posts/citrix-uberagent-getting-started-linux/">&lt;h2 id=&quot;uberagent-for-linux-has-arrived&quot;&gt;uberAgent for Linux Has Arrived&lt;&#x2F;h2&gt;
&lt;p&gt;After years of Windows getting all the monitoring love, &lt;a href=&quot;https:&#x2F;&#x2F;www.citrix.com&#x2F;downloads&#x2F;citrix-early-access-release&#x2F;ear&#x2F;uberagent-preview.html&quot;&gt;uberAgent for Linux Technology Preview 1&lt;&#x2F;a&gt; has arrived - and it&#x27;s everything we have been waiting for.&lt;&#x2F;p&gt;
&lt;p&gt;I run a multi-site setup with MikroTik Routers handling WireGuard tunnels from home to coworking space to my cloud infrastructure. Systems like &lt;code&gt;sso-1&lt;&#x2F;code&gt;, &lt;code&gt;drive-1&lt;&#x2F;code&gt;, and &lt;code&gt;splunk-1&lt;&#x2F;code&gt; communicate over internal network, accessible through a gateway server, giving me that enterprise-grade distributed architecture. What gets me genuinely excited is finally having proper visibility into all that beautiful &lt;strong&gt;server workload&lt;&#x2F;strong&gt;. Docker hosts under load, reverse proxy performance, inter-service communication patterns, resource consumption across distributed services - this is where the real insights live.&lt;&#x2F;p&gt;
&lt;p&gt;Having uberAgent finally extend from Windows to my entire Linux infrastructure fills a gap I&#x27;ve been dealing with for years.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-linux-infrastructure-monitoring-just-got-interesting&quot;&gt;Why Linux Infrastructure Monitoring Just Got Interesting&lt;&#x2F;h2&gt;
&lt;p&gt;You&#x27;ve got a beautiful Linux infrastructure running critical workloads, but your monitoring looks like Dr. Frankenstein&#x27;s laboratory. A little Prometheus here, some custom scripts there, maybe some Grafana dashboards that kinda-sorta show you what&#x27;s happening. You&#x27;re stitching together metrics from five different tools just to answer simple questions like &amp;quot;Why is this service slow?&amp;quot; or &amp;quot;Which application is hammering my database?&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;Meanwhile, your Windows colleagues are living it up with comprehensive uberAgent dashboards that actually make sense.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Not anymore.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started-ubuntu-installation&quot;&gt;Getting Started: Ubuntu Installation&lt;&#x2F;h2&gt;
&lt;p&gt;Currently, uberAgent for Linux ships as &lt;code&gt;.deb&lt;&#x2F;code&gt; packages, making Ubuntu (and Debian-based) installations straightforward. Here&#x27;s how to get it running on your systems.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;&#x2F;h3&gt;
&lt;p&gt;Please check the &lt;a href=&quot;https:&#x2F;&#x2F;docs.citrix.com&#x2F;en-us&#x2F;uberagent&#x2F;7-4-0&#x2F;linux-tech-preview.html&quot;&gt;official documentation&lt;&#x2F;a&gt; for the latest instructions.&lt;&#x2F;p&gt;
&lt;p&gt;So, before diving in, ensure your systems have the basics:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install wget unzip
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;manual-installation-process&quot;&gt;Manual Installation Process&lt;&#x2F;h3&gt;
&lt;p&gt;First, extract the uberAgent package from the distribution ZIP:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Create working directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;tmp&#x2F;uberagent &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;tmp&#x2F;uberagent
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Extract the ZIP (assuming you&amp;#39;ve downloaded it)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;unzip&lt;&#x2F;span&gt;&lt;span&gt; uberAgent-Linux-TP1.zip
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Find and install the .deb package
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt; .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;*uberagent*amd64*.deb&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -exec&lt;&#x2F;span&gt;&lt;span&gt; sudo dpkg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -i &lt;&#x2F;span&gt;&lt;span&gt;{} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Fix any dependency issues
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;configuration-directory-structure&quot;&gt;Configuration Directory Structure&lt;&#x2F;h3&gt;
&lt;p&gt;Once installed, uberAgent requires its configuration structure at &lt;code&gt;&#x2F;etc&#x2F;uberAgent&#x2F;&lt;&#x2F;code&gt;. The key files you&#x27;ll work with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x2F;etc&#x2F;uberAgent&#x2F;uberAgent.conf&lt;&#x2F;code&gt; - Main configuration file&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;etc&#x2F;uberAgent&#x2F;&lt;&#x2F;code&gt; - Additional configuration files&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;var&#x2F;log&#x2F;uberAgent&#x2F;&lt;&#x2F;code&gt; - Log files location&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;basic-configuration-setup&quot;&gt;Basic Configuration Setup&lt;&#x2F;h3&gt;
&lt;p&gt;Download the standard configuration bundle:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Download the latest config bundle
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;wget -O&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;tmp&#x2F;uberAgent.uAConfig \
&lt;&#x2F;span&gt;&lt;span&gt;  https:&#x2F;&#x2F;github.com&#x2F;vastlimits&#x2F;uberAgent-config&#x2F;raw&#x2F;refs&#x2F;heads&#x2F;version&#x2F;7.4&#x2F;config-dist&#x2F;uberAgent.uAConfig
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Extract to config directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; unzip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;tmp&#x2F;uberAgent.uAConfig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -d&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;uberAgent&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;splunk-integration&quot;&gt;Splunk Integration&lt;&#x2F;h3&gt;
&lt;p&gt;Edit &lt;code&gt;&#x2F;etc&#x2F;uberAgent&#x2F;uberAgent.conf&lt;&#x2F;code&gt; to configure your Splunk HEC endpoint:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ini&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-ini &quot;&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;[Receiver]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Name &lt;&#x2F;span&gt;&lt;span&gt;= Splunk
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Type &lt;&#x2F;span&gt;&lt;span&gt;= Splunk
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Protocol &lt;&#x2F;span&gt;&lt;span&gt;= HTTP
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Servers &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;https:&#x2F;&#x2F;your-splunk-hec-url:8088
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;RESTToken &lt;&#x2F;span&gt;&lt;span&gt;= your-hec-token-here
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;service-management&quot;&gt;Service Management&lt;&#x2F;h3&gt;
&lt;p&gt;Start and enable the service:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl enable uberAgent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl start uberAgent
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Check status
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl status uberAgent
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# View logs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; journalctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; uberAgent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;scaling-with-ansible-key-automation-snippets&quot;&gt;Scaling with Ansible: Key Automation Snippets&lt;&#x2F;h2&gt;
&lt;p&gt;For larger deployments, Ansible makes this process repeatable across your infrastructure. Here are the essential patterns I use:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;package-installation-task&quot;&gt;Package Installation Task&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Install uberAgent from ZIP
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Transfer and extract ZIP
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;{{ uberagent_local_zip }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dest&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;tmp&#x2F;uberagent.zip&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Unarchive ZIP on target
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;unarchive&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;tmp&#x2F;uberagent.zip&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dest&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;tmp&#x2F;uberagent&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;remote_src&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;yes
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Find .deb package
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;paths&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;tmp&#x2F;uberagent&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;patterns&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;*uberagent*amd64*.deb&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;recurse&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;yes
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;deb_search
&lt;&#x2F;span&gt;&lt;span&gt;      
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Install via dpkg
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;dpkg -i {{ (deb_search.files | map(attribute=&amp;#39;path&amp;#39;) | list)[0] }}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;dpkg_install
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;changed_when&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;dpkg_install.rc == 0
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;failed_when&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;dpkg_install.rc not in [0,1]
&lt;&#x2F;span&gt;&lt;span&gt;      
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Fix dependencies if needed
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;present
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;update_cache&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;yes
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;*&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;when&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;dpkg_install.rc == 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;configuration-deployment&quot;&gt;Configuration Deployment&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Deploy uberAgent configuration
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Download config bundle
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;get_url&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;{{ uberagent_config_bundle_url }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dest&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;tmp&#x2F;uberAgent.uAConfig&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mode&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;0644&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Extract configuration bundle
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;unarchive&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;tmp&#x2F;uberAgent.uAConfig&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dest&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;etc&#x2F;uberAgent&#x2F;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;remote_src&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;yes
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;extra_opts&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;-o&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;-q&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;splunk-receiver-configuration&quot;&gt;Splunk Receiver Configuration&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Configure Splunk receiver
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Define Splunk receiver block
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;set_fact&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;uberagent_receiver_block&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;|-
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;          [Receiver]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;          Name = {{ uberagent_receiver_name }}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;          Type = Splunk
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;          Protocol = HTTP
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;          Servers = {{ uberagent_splunk_hec_url }}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;          RESTToken = {{ uberagent_splunk_hec_token }}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Replace existing receiver configuration
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;etc&#x2F;uberAgent&#x2F;uberAgent.conf&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;regexp&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;(?ms)^\[Receiver\]\nName *=.*?\nType *=.*?\nProtocol *=.*?\nServers *=.*?\nRESTToken *=.*?\n&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;{{ uberagent_receiver_block | regex_replace(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;n&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;) }}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;receiver_replace
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;notify&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;restart uberAgent
&lt;&#x2F;span&gt;&lt;span&gt;      
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Add receiver block if none existed
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;blockinfile&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;etc&#x2F;uberAgent&#x2F;uberAgent.conf&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;marker&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;;; {mark} ANSIBLE MANAGED RECEIVER BLOCK&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;{{ uberagent_receiver_block }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;insertafter&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;when&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;not receiver_replace.changed
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;notify&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;restart uberAgent
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These Ansible snippets give you the foundation - adapt the variables and structure to match your environment and deployment needs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;performance-impact-analysis&quot;&gt;Performance Impact Analysis&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s start with the most important question: what does uberAgent actually cost your infrastructure? This analysis shows uberAgent&#x27;s resource consumption across multiple hosts over a full week of monitoring.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;screenshots&#x2F;Analyze-data-over-time-Splunk-9-0-7-08-26-2025_08_50_PM.png&quot; alt=&quot;Analyze Data Over Time&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The results are impressive: uberAgent delivers comprehensive monitoring with minimal overhead. You&#x27;re looking at resource consumption so low that you&#x27;ll question whether it&#x27;s actually collecting all that data.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU impact&lt;&#x2F;strong&gt;: Consistently under 1% across all monitored systems&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Memory footprint&lt;&#x2F;strong&gt;: Typically 20-50MB per agent - less than a single browser tab&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is monitoring software that enhances your visibility without becoming a performance bottleneck.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;infrastructure-discovery&quot;&gt;Infrastructure Discovery&lt;&#x2F;h3&gt;
&lt;p&gt;Your complete infrastructure topology emerges automatically as agents come online. Having a machine inventory I can rely on, next to my Ansible inventory is great. I really like this one.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;screenshots&#x2F;Machine-Inventory-Splunk-9-0-7-08-26-2025_08_39_PM.png&quot; alt=&quot;Machine Inventory&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;network-flow-visualization&quot;&gt;Network Flow Visualization&lt;&#x2F;h3&gt;
&lt;p&gt;Understanding inter-service communication becomes trivial when you can see exactly which services talk to each other and how much traffic flows between them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;screenshots&#x2F;Machine-Network-Communication-Splunk-9-0-7-08-26-2025_08_35_PM.png&quot; alt=&quot;Machine Network Communication&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;application-level-troubleshooting&quot;&gt;Application-Level Troubleshooting&lt;&#x2F;h3&gt;
&lt;p&gt;When applications start misbehaving, you get immediate visibility into network-related issues that traditional monitoring tools miss entirely.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;screenshots&#x2F;Application-Network-Issues-Splunk-9-0-7-08-26-2025_08_38_PM.png&quot; alt=&quot;Application Network Issues&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;&#x2F;h2&gt;
&lt;p&gt;This is it - uberAgent for Linux doesn&#x27;t just add another platform; it &lt;strong&gt;completes the entire monitoring ecosystem&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Think about what this means: your existing Windows and macOS monitoring now gets perfectly extended with comprehensive Linux coverage. We&#x27;re talking about &lt;strong&gt;Linux VDAs&lt;&#x2F;strong&gt; running in your Citrix environments, &lt;strong&gt;non-VDA Linux desktops&lt;&#x2F;strong&gt; handling critical workloads, &lt;strong&gt;Linux thin clients&lt;&#x2F;strong&gt; connecting to your Citrix infrastructure - suddenly every endpoint in your environment speaks the same monitoring language!&lt;&#x2F;p&gt;
&lt;p&gt;But here&#x27;s what gets me absolutely thrilled: &lt;strong&gt;Server workloads!&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Your Docker hosts, Kubernetes clusters, database servers, message queues, reverse proxies, microservices, load balancers - &lt;strong&gt;EVERYTHING&lt;&#x2F;strong&gt; now gets that same incredible uberAgent visibility that made Windows monitoring so powerful. Whether it&#x27;s Citrix infrastructure, bare metal servers, or cloud-native workloads - it all fits together in one unified, beautiful monitoring toolbox.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;This is infrastructure observability done right&lt;&#x2F;strong&gt;: one agent, one data format, one set of dashboards covering your entire technology stack from end-user experience down to kernel-level performance metrics. Citrix environments, non-Citrix infrastructure, hybrid cloud setups, on-premises data centers - it&#x27;s all there, all visible, all making sense together.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The deployment stays effortless&lt;&#x2F;strong&gt; (thanks to Ansible automation), &lt;strong&gt;performance impact remains minimal&lt;&#x2F;strong&gt;, and &lt;strong&gt;the insights now span absolutely everything&lt;&#x2F;strong&gt;. No more tool sprawl, no more monitoring blind spots, no more wondering if that user complaint is related to the application, the network, or the underlying infrastructure.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Ready to achieve monitoring enlightenment?&lt;&#x2F;strong&gt; Deploy this Technology Preview and watch your entire infrastructure transform from a collection of mysterious black boxes into a completely transparent, interconnected system where every component tells its story.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What&#x27;s Next?&lt;&#x2F;h2&gt;
&lt;p&gt;After deploying uberAgent across my infrastructure, I quickly noticed one challenge: data volume. While the insights are invaluable, my home lab generates monitoring data at a pace that exceeds typical residential environments.&lt;&#x2F;p&gt;
&lt;p&gt;With Splunk&#x27;s free licensing constraints (500MB&#x2F;day), I am implementing &lt;a href=&quot;https:&#x2F;&#x2F;docs.citrix.com&#x2F;en-us&#x2F;uberagent&#x2F;7-4-0&#x2F;uxm-features-configuration&#x2F;event-data-filtering&quot;&gt;Event Data Filters&lt;&#x2F;a&gt; as a solution and add a optimized data volume configuration. However, I&#x27;m already contemplating the next evolution - developing a custom backend infrastructure with purpose-built visualization dashboards specifically optimized for my environment.&lt;&#x2F;p&gt;
&lt;p&gt;This technical challenge would be particularly engaging - balancing comprehensive visibility with resource efficiency. For now, though, the filters keep things manageable while I plan the next iteration of my monitoring architecture.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Disclosure Note:&lt;&#x2F;strong&gt;
I am a Citrix employee. However, this post represents my personal enthusiasm and experience with the product, not an official company perspective. I wrote this entirely of my own volition because I&#x27;m genuinely excited about these capabilities.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Fedora: Installing LibreOffice Language Packs</title>
        <published>2025-08-14T00:00:00+00:00</published>
        <updated>2025-08-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/notes/fedora-libreoffice-langpack/"/>
        <id>https://svnscha.de/notes/fedora-libreoffice-langpack/</id>
        
        <content type="html" xml:base="https://svnscha.de/notes/fedora-libreoffice-langpack/">&lt;p&gt;Need LibreOffice in your native language? Fedora packages language packs separately, so you&#x27;ll need to install them manually to get proper localization, spell checking, and hyphenation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;installing-a-specific-language-pack&quot;&gt;Installing a specific language pack&lt;&#x2F;h3&gt;
&lt;p&gt;To install the German language pack for LibreOffice:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; dnf install libreoffice-langpack-de
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;finding-available-language-packs&quot;&gt;Finding available language packs&lt;&#x2F;h3&gt;
&lt;p&gt;To see all available LibreOffice language packs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dnf&lt;&#x2F;span&gt;&lt;span&gt; search libreoffice-langpack
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;common-language-pack-codes&quot;&gt;Common language pack codes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;de&lt;&#x2F;code&gt; - German&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;es&lt;&#x2F;code&gt; - Spanish&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fr&lt;&#x2F;code&gt; - French&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;it&lt;&#x2F;code&gt; - Italian&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pt&lt;&#x2F;code&gt; - Portuguese&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ru&lt;&#x2F;code&gt; - Russian&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After installation, restart LibreOffice and the new language should be available in the language settings.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>When Citrix App Protection Becomes App Obstruction</title>
        <published>2025-07-01T00:00:00+00:00</published>
        <updated>2025-07-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/posts/citrix-app-protection-restricted-launch/"/>
        <id>https://svnscha.de/posts/citrix-app-protection-restricted-launch/</id>
        
        <content type="html" xml:base="https://svnscha.de/posts/citrix-app-protection-restricted-launch/">&lt;h2 id=&quot;when-your-own-product-keeps-you-honest&quot;&gt;When Your Own Product Keeps You Honest&lt;&#x2F;h2&gt;
&lt;p&gt;You&#x27;re trying to connect to your virtual desktop through Citrix Workspace, ready to access your work environment and get stuff done, when suddenly you&#x27;re greeted with this delightfully cryptic message:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;App protection component is restricting this launch. Contact your system administrator for further assistance.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ah yes, classic.&lt;&#x2F;strong&gt; Especially when you ARE the system administrator and this error message tells you absolutely nothing useful. It&#x27;s like getting a &amp;quot;something went wrong&amp;quot; alert - technically accurate, but not exactly actionable.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the plot twist: In my case, this happened when you have Nextcloud running on your host machine. Close Nextcloud, and suddenly Citrix works like a dream. Open it again, and boom - connection blocked. As a Citrix employee (albeit on a different team), I found this particularly... educational. Nothing quite like debugging your own company&#x27;s products in your spare time!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;so-why&quot;&gt;So, why?&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s what&#x27;s happening: When you have Nextcloud running on your host machine, it uses &lt;code&gt;LD_PRELOAD&lt;&#x2F;code&gt; as part of its Flatpak sandboxing mechanism. This is a perfectly legitimate system mechanism that allows applications to override or extend library functions at runtime.&lt;&#x2F;p&gt;
&lt;p&gt;Our App Protection component, being the diligent security guard that it is, sees that process using &lt;code&gt;LD_PRELOAD&lt;&#x2F;code&gt; on the host system and thinks, &amp;quot;Aha! Suspicious activity!&amp;quot; - even when you&#x27;re just trying to connect to a completely separate virtual desktop. It&#x27;s a bit like having a security system that won&#x27;t let you unlock your front door because your neighbor is using power tools.&lt;&#x2F;p&gt;
&lt;p&gt;The solution? A gentle conversation with the allow list to explain that these specific &lt;code&gt;LD_PRELOAD&lt;&#x2F;code&gt; patterns from Nextcloud are actually friends, not foes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-essential-references&quot;&gt;The Essential References&lt;&#x2F;h2&gt;
&lt;p&gt;Before we fix this, credit where credit is due. The Citrix documentation that actually helped:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.citrix.com&#x2F;en-us&#x2F;citrix-workspace-app&#x2F;app-protection&#x2F;troubleshoot&#x2F;generic-troubleshooting-scenarios.html&quot;&gt;General Troubleshooting&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.citrix.com&#x2F;en-us&#x2F;citrix-workspace-app&#x2F;app-protection&#x2F;configure&#x2F;configure-allowlist-for-ld-preload&quot;&gt;LD_PRELOAD allow list&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-fix-configuring-the-ld-preload-allow-list&quot;&gt;The Fix: Configuring the LD_PRELOAD Allow List&lt;&#x2F;h2&gt;
&lt;p&gt;First, open the App Protection allow list configuration file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; nano &#x2F;opt&#x2F;Citrix&#x2F;ICAClient&#x2F;config&#x2F;AppProtection_Preload_Allowlist.json
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add the following entries to diplomatically inform App Protection that these specific &lt;code&gt;LD_PRELOAD&lt;&#x2F;code&gt; patterns from Nextcloud are legitimate and shouldn&#x27;t trigger its protective instincts:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;LD_PRELOAD=&#x2F;app&#x2F;bin&#x2F;..&#x2F;lib&#x2F;libzypak-preload-host.so:&#x2F;app&#x2F;bin&#x2F;..&#x2F;lib&#x2F;libzypak-preload-host-spawn-strategy.so:&#x2F;app&#x2F;bin&#x2F;..&#x2F;lib&#x2F;libzypak-preload-host-spawn-strategy-close.so&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Nextcloud&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;LD_PRELOAD=&#x2F;app&#x2F;bin&#x2F;..&#x2F;lib&#x2F;libzypak-preload-child.so:&#x2F;app&#x2F;bin&#x2F;..&#x2F;lib&#x2F;libzypak-preload-child-spawn-strategy.so&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;app&#x2F;lib&#x2F;com.nextcloud.talk&#x2F;Nextcloud&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;LD_PRELOAD=&#x2F;app&#x2F;bin&#x2F;..&#x2F;lib&#x2F;libzypak-preload-child.so:&#x2F;app&#x2F;bin&#x2F;..&#x2F;lib&#x2F;libzypak-preload-child-spawn-strategy.so&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;app&#x2F;lib&#x2F;com.nextcloud.talk&#x2F;Nextcloud&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;what-do-these-entries-mean&quot;&gt;What do these entries mean?&lt;&#x2F;h3&gt;
&lt;p&gt;Each line maps a specific &lt;code&gt;LD_PRELOAD&lt;&#x2F;code&gt; pattern to the application that uses it. The first entry handles Nextcloud&#x27;s main process, while the second handles child processes. By adding these to the allow list, App Protection will graciously step aside and allow your virtual desktop connections to proceed without further interrogation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bonus-finding-your-own-ld-preload-patterns&quot;&gt;Bonus: Finding Your Own LD_PRELOAD Patterns&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re dealing with other applications that get blocked, here&#x27;s a handy script to identify which processes are using &lt;code&gt;LD_PRELOAD&lt;&#x2F;code&gt; on your system (copied from the linked documentation):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; pid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;proc&#x2F;*&#x2F;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span&gt;%*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span&gt;##*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;environ_file&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;proc&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;environ&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;-f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;environ_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ld_preload_entry&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;\0&amp;#39; &amp;#39;\n&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;environ_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;grep -w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;LD_PRELOAD&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;-n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ld_preload_entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cmdline_file&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;proc&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;cmdline&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cmdline&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;\0&amp;#39; &amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cmdline_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;{print $1}&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ld_preload_entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cmdline&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This script scans all running processes and outputs the exact format you need for the allow list configuration.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;apply-the-changes&quot;&gt;Apply the Changes&lt;&#x2F;h2&gt;
&lt;p&gt;Once you&#x27;ve updated the configuration file, restart the App Protection service:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl restart AppProtectionService-install.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Et voilà!&lt;&#x2F;strong&gt; Harmony restored. Error banished, virtual desktop connection established, and you can finally keep Nextcloud running on your host machine while accessing your work environment without any diplomatic incidents.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Pro tip:&lt;&#x2F;strong&gt; Document this fix somewhere you&#x27;ll actually remember to look. Future you will thank present you when setting up a new machine or after a product update kindly resets your allow list. This post is basically my way of creating searchable breadcrumbs for anyone (including future me) who encounters that cryptic error message and wonders why Nextcloud seems to be the culprit.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Future of Crash Analysis: AI Meets WinDBG</title>
        <published>2025-05-04T00:00:00+00:00</published>
        <updated>2025-05-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/posts/ai-meets-windbg/"/>
        <id>https://svnscha.de/posts/ai-meets-windbg/</id>
        
        <content type="html" xml:base="https://svnscha.de/posts/ai-meets-windbg/">&lt;h2 id=&quot;old-meets-new-bringing-crash-analysis-into-2025&quot;&gt;Old Meets New: Bringing Crash Analysis into 2025&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s face it - while the rest of software development has evolved at warp speed, crash dump analysis feels like it&#x27;s been preserved in digital amber for decades. We&#x27;ve got self-driving cars and pocket-sized supercomputers, yet here we are, still pecking away at command prompts like it&#x27;s the dawn of the internet. Why is debugging the only area where we cling to tools that look like they belong in a computer history museum?&lt;&#x2F;p&gt;
&lt;p&gt;Picture this: You, a professional software engineer in 2025, hunched over a terminal, manually typing arcane commands like &lt;code&gt;!analyze -v&lt;&#x2F;code&gt; and &lt;code&gt;.ecxr&lt;&#x2F;code&gt;, squinting at hexadecimal memory addresses, and mentally translating stack traces. All while your friends in other industries are delegating their work to AI assistants that can write entire documents, create art, or automate complex workflows.&lt;&#x2F;p&gt;
&lt;p&gt;Something&#x27;s wrong with this picture, right?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What if I told you we can throw that ancient workflow into the dustbin of computing history?&lt;&#x2F;strong&gt; That&#x27;s exactly what I&#x27;ve done. And I&#x27;m not talking about slightly better syntax highlighting or prettier UI for WinDBG. I&#x27;m talking about a fundamental transformation where you simply have a conversation with your debugger.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;when-inspiration-strikes&quot;&gt;When Inspiration Strikes&lt;&#x2F;h2&gt;
&lt;p&gt;During a debugging session at work, I had one of those lightning bolt moments. What if - and stick with me here - we could apply the same AI-assisted &amp;quot;vibe coding&amp;quot; approach to crash dump analysis? &lt;&#x2F;p&gt;
&lt;p&gt;Picture this: instead of manually slogging through memory dumps and command outputs, you simply ask, &amp;quot;Hey, why did this application crash?&amp;quot; and get an intelligent, contextual answer that actually helps you solve the problem.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The idea was too compelling not to pursue. So I built it.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;see-it-in-action-ai-powered-crash-analysis&quot;&gt;See It In Action: AI-Powered Crash Analysis&lt;&#x2F;h2&gt;
&lt;p&gt;Before diving into the technical details, let me show you what this looks like in practice. I have prepared a demo application to showcase two different use cases:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;video-1-crash-analysis-and-automated-bugfix&quot;&gt;Video 1: Crash Analysis and Automated Bugfix&lt;&#x2F;h3&gt;
&lt;p&gt;In this video, I show how Copilot can analyze a crash dump, identify the bug and auto-fix the issue.&lt;&#x2F;p&gt;
&lt;video class=&quot;cast&quot; src=&quot;&#x2F;casts&#x2F;2025-05-03-CrashDump1.webm&quot; controls&gt;
  Your browser does not support the video tag.
&lt;&#x2F;video&gt;
&lt;p&gt;As you can see in the video, instead of manually running WinDBG commands and interpreting the cryptic output, I&#x27;m having a natural conversation with GitHub Copilot. The AI quickly identifies that the application crashed, explains which specific conditions led to the crash, and suggests a fix.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;video-2-automated-crash-dump-analysis-of-multiple-crash-dump-files&quot;&gt;Video 2: Automated Crash Dump Analysis of multiple crash dump files&lt;&#x2F;h3&gt;
&lt;p&gt;This video demonstrates a different capability: analyzing multiple crash dump files at once. It shows how the tool can quickly identify which dumps belong to your application and which don&#x27;t.&lt;&#x2F;p&gt;
&lt;video class=&quot;cast&quot; src=&quot;&#x2F;casts&#x2F;2025-05-03-CrashDump2.webm&quot; controls&gt;
  Your browser does not support the video tag.
&lt;&#x2F;video&gt;
&lt;p&gt;Worth noting, it takes just a few seconds until you get your first useful answer. I&#x27;ve played around with this for many hours and let me tell you one thing: You can really go deep. If you ask the right questions, the AI runs WinDBG&#x2F;CDB commands that I haven&#x27;t seen in all these years of debugging, and that is simply amazing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-can-this-help-the-industry&quot;&gt;How can this help the industry?&lt;&#x2F;h2&gt;
&lt;p&gt;I believe this is one of the really good examples of how AI can boost productivity. Analyzing crash dumps is a very tedious task. It begins with quickly checking and identifying whether crashes are the same or different, and often requires very advanced knowledge when a crash is challenging - really challenging. &lt;&#x2F;p&gt;
&lt;p&gt;Copilot can help here tremendously; it knows how to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Interpret assembly code (without you having to remember what EAX stands for)&lt;&#x2F;li&gt;
&lt;li&gt;Check memory contents (so you don&#x27;t have to count hex bytes on your fingers)&lt;&#x2F;li&gt;
&lt;li&gt;Traverse structures with symbols (goodbye to manual pointer arithmetic!)&lt;&#x2F;li&gt;
&lt;li&gt;And so much more&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is a game changer - not just for engineers, but also for support, QA, and everyone involved with crash dumps. It&#x27;s like going from hunting with a stone spear to using a guided missile.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-did-i-build-this&quot;&gt;How did I build this?&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;ve ever worked with WinDBG, you know the drill: cryptic commands, obscure syntax, and endless scrolling through memory addresses and stack traces that make your eyes glaze over. It&#x27;s the kind of specialized knowledge that takes years to master and feels like speaking an alien language even when you do.&lt;&#x2F;p&gt;
&lt;p&gt;The trick here is connecting WinDBG with AI. To do that, you first need to programmatically control a debugging session, right? There are plenty of options on how to do this. I prefer to keep things simple, so I have chosen &lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;windows-hardware&#x2F;drivers&#x2F;debugger&#x2F;debugging-using-cdb-and-ntsd&quot;&gt;CDB&lt;&#x2F;a&gt;, which is Microsoft&#x27;s Console Debugger. It operates on standard input and output, and that&#x27;s so much more fun to deal with than setting up COM APIs or similar approaches.&lt;&#x2F;p&gt;
&lt;p&gt;The second part is &amp;quot;connecting with AI.&amp;quot; That&#x27;s where Model Context Protocol Servers come into the game.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-model-context-protocol-servers&quot;&gt;Understanding Model Context Protocol Servers&lt;&#x2F;h2&gt;
&lt;p&gt;MCP is an open standard developed by Anthropic, released in November 2024. This protocol allows AI models to interact with external tools and data sources - think of it as giving AI assistants &amp;quot;hands&amp;quot; to work with other software. It defines a way for AI assistants to discover, access, and use tools through a consistent interface. In essence, it&#x27;s what allows GitHub Copilot to &amp;quot;talk&amp;quot; to external programs like WinDBG.&lt;&#x2F;p&gt;
&lt;p&gt;An MCP server acts as the intermediary between the AI model and the tool. It:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Registers available tools with the client&lt;&#x2F;li&gt;
&lt;li&gt;Handles requests from AI models to use these tools&lt;&#x2F;li&gt;
&lt;li&gt;Executes the tool operations and returns results&lt;&#x2F;li&gt;
&lt;li&gt;Maintains context across interactions&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This architecture means that any tool can be made available to AI models if someone builds an MCP server for it. And that&#x27;s exactly what I did for WinDBG (CDB).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-mcp-instead-of-languagemodeltool-api&quot;&gt;Why MCP Instead of LanguageModelTool API?&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;api&#x2F;extension-guides&#x2F;tools&quot;&gt;LanguageModelTool API&lt;&#x2F;a&gt; might eventually be a better fit for this specific use-case. Creating a Visual Studio Extension that &amp;quot;just works&amp;quot; out of the box would potentially simplify the integration process significantly.&lt;&#x2F;p&gt;
&lt;p&gt;However, using MCP directly offers several notable advantages. It works with any AI model, not just limiting itself to Copilot. The server can be used outside VS Code, functioning with various other tools. New features can be easily added without necessitating changes to the core integration. Moreover, it remains platform-independent, avoiding lock-in to any single company&#x27;s implementation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-mcp-windbg-project&quot;&gt;The MCP-WinDBG Project&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve implemented a &lt;a href=&quot;https:&#x2F;&#x2F;www.anthropic.com&#x2F;news&#x2F;model-context-protocol&quot;&gt;Model Context Protocol&lt;&#x2F;a&gt; server that wraps WinDBG&#x2F;CDB and exposes its capabilities to AI models within VS Code. Better yet, I&#x27;ve made it open source so everyone can experience this new workflow.&lt;&#x2F;p&gt;
&lt;p&gt;The project, called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;svnscha&#x2F;mcp-windbg&quot;&gt;mcp-windbg&lt;&#x2F;a&gt;, creates a seamless bridge between VS Code, GitHub Copilot, and the powerful analysis capabilities of WinDBG.&lt;&#x2F;p&gt;
&lt;p&gt;The actual &amp;quot;hard part&amp;quot; was implementing the CDB (Command-Line WinDBG) interaction layer. And by &amp;quot;hard&amp;quot;, I mean vibe-coding with two coffees on a Saturday morning, where I spent more time being annoyed by pyTest failures than actual coding difficulties. The core implementation came together surprisingly quickly!&lt;&#x2F;p&gt;
&lt;p&gt;The rest is primarily wrapper code that implements the Model Context Protocol specifications. Now that I&#x27;ve established and defined the core WinDBG interaction logic, I&#x27;m considering refactoring the project to TypeScript. This would enable me to create both an MCP Server in TypeScript and a dedicated Visual Studio Extension, with both implementations leveraging the same underlying CDB interaction layer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-does-this-mean-in-practice&quot;&gt;What Does This Mean In Practice?&lt;&#x2F;h2&gt;
&lt;p&gt;Let me walk you through what this enables:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Natural language crash analysis&lt;&#x2F;strong&gt;: &amp;quot;Why is this application crashing with an access violation at this address?&amp;quot; (Instead of: &amp;quot;What the $%#@ is this heap corruption!?&amp;quot;)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Contextual debugging&lt;&#x2F;strong&gt;: &amp;quot;Show me the stack trace for thread 5 and explain what each function is doing based on the symbols.&amp;quot; (Instead of staring at call stacks like they&#x27;re ancient hieroglyphics)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Root cause identification&lt;&#x2F;strong&gt;: &amp;quot;What&#x27;s causing this null pointer dereference and where should I look in the code to fix it?&amp;quot; (Instead of playing detective with memory addresses)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Instead of typing obscure commands like &lt;code&gt;!analyze -v&lt;&#x2F;code&gt; followed by a series of manual investigations, you simply ask questions in plain language, and the AI interprets the crash data for you. It&#x27;s like having a WinDBG expert whispering in your ear, except it doesn&#x27;t get annoyed when you ask the same question five times.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-it-works&quot;&gt;How It Works&lt;&#x2F;h2&gt;
&lt;p&gt;The MCP server functions as a bridge between GitHub Copilot and WinDBG&#x27;s powerful analysis capabilities:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;It provides a set of tools that Copilot can use to interact with crash dumps&lt;&#x2F;li&gt;
&lt;li&gt;It translates natural language questions into appropriate WinDBG commands&lt;&#x2F;li&gt;
&lt;li&gt;It parses and interprets the often cryptic WinDBG output into more useful information&lt;&#x2F;li&gt;
&lt;li&gt;It maintains context throughout a debugging session, enabling follow-up questions to work naturally&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The technical implementation uses Python to spawn and communicate with CDB (the command-line version of WinDBG), parses the output, and exposes the functionality through the Model Context Protocol to VS Code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started-with-mcp-windbg&quot;&gt;Getting Started With mcp-windbg&lt;&#x2F;h2&gt;
&lt;p&gt;Ready to try it yourself? Here&#x27;s how to get started:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;First, make sure you have the Windows SDK installed with Debugging Tools for Windows&lt;&#x2F;li&gt;
&lt;li&gt;Clone the repository: &lt;code&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;svnscha&#x2F;mcp-windbg.git&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Set up a Python virtual environment and install the package&lt;&#x2F;li&gt;
&lt;li&gt;Configure VS Code to use the MCP server&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For complete details, check out the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;svnscha&#x2F;mcp-windbg&quot;&gt;repository README&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Once configured, create a &lt;code&gt;.vscode&#x2F;mcp.json&lt;&#x2F;code&gt; file in your project that points to the server:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;servers&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;mcp_server_windbg&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;stdio&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;command&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;python&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;args&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;-m&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;mcp_server_windbg&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            ],
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;env&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;_NT_SYMBOL_PATH&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;SRV*C:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Symbols*https:&#x2F;&#x2F;msdl.microsoft.com&#x2F;download&#x2F;symbols&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You might need to update the command, depending on where and how you have installed the mcp_server_windbg to.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-human-touch-still-matters&quot;&gt;The Human Touch Still Matters&lt;&#x2F;h2&gt;
&lt;p&gt;Just like with &lt;a href=&quot;&#x2F;posts&#x2F;vscode-vibe-coding&#x2F;&quot;&gt;code refactoring&lt;&#x2F;a&gt;, the AI assistance isn&#x27;t perfect. The human element - your experience, intuition, and domain knowledge - remains crucial. Sometimes you&#x27;ll need to guide the analysis, ask follow-up questions, or provide additional context.&lt;&#x2F;p&gt;
&lt;p&gt;But that&#x27;s exactly what makes this approach so powerful: it combines the best of both worlds - AI&#x27;s ability to quickly process and analyze large amounts of data with your human expertise in interpreting what truly matters for your specific application. Think of it as having a brilliant but occasionally confused intern who can do incredible things but sometimes needs you to point them in the right direction. &amp;quot;No, not that pointer... the OTHER pointer.&amp;quot;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;join-the-experience&quot;&gt;Join The Experience&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;d love for you to try this out, contribute to the project, and share your experiences. If you&#x27;re interested:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Star the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;svnscha&#x2F;mcp-windbg&quot;&gt;GitHub repository&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Try it on your own crash dumps&lt;&#x2F;li&gt;
&lt;li&gt;Report issues, suggest improvements, or contribute code&lt;&#x2F;li&gt;
&lt;li&gt;Share your success stories (or even failures - we learn from those too!)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;the-magic-is-in-the-flow&quot;&gt;The Magic Is In The Flow&lt;&#x2F;h2&gt;
&lt;p&gt;Just like with my code refactoring experience, the real magic isn&#x27;t about any single capability - it&#x27;s about the flow. When debugging stops being a tedious chore and becomes a fluid conversation, something fundamentally changes in how you approach problem-solving.&lt;&#x2F;p&gt;
&lt;p&gt;Gone are the days of dreading crash analysis. Instead, each debugging session becomes an opportunity for collaboration with an AI partner that helps you understand what&#x27;s happening at a deeper level.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;&#x2F;h2&gt;
&lt;p&gt;Crash dump analysis has traditionally been one of the most technically demanding and least enjoyable parts of software development. It&#x27;s like archaeology with a keyboard—painstakingly excavating through layers of memory and CPU state to unearth what went wrong. With AI assistance through tools like mcp-windbg, it becomes another area where we can experience that perfect &amp;quot;vibe state&amp;quot; of frictionless problem-solving.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re still manually typing WinDBG commands and squinting at memory dumps in 2025, you&#x27;re not just missing out on productivity - you&#x27;re missing out on a fundamentally more enjoyable way to work.&lt;&#x2F;p&gt;
&lt;p&gt;Try it. Debug it. Vibe it.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Vibe Coding is So Damn Real</title>
        <published>2025-04-27T00:00:00+00:00</published>
        <updated>2025-04-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/posts/vscode-vibe-coding/"/>
        <id>https://svnscha.de/posts/vscode-vibe-coding/</id>
        
        <content type="html" xml:base="https://svnscha.de/posts/vscode-vibe-coding/">&lt;h2 id=&quot;why-you-ask&quot;&gt;Why, You Ask?&lt;&#x2F;h2&gt;
&lt;p&gt;Ever had that moment when your coding flow is so perfect it feels like you and your tools are in some kind of cosmic alignment? That&#x27;s vibe coding. It&#x27;s when the friction between thought and implementation practically disappears. And let me tell you, with GitHub Copilot and VS Code, this isn&#x27;t just a fleeting sensation-it&#x27;s a consistent reality.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;I&#x27;m tired of writing about theoretical capabilities. Let me show you something concrete.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-childhood-dream-come-true&quot;&gt;A Childhood Dream Come True&lt;&#x2F;h2&gt;
&lt;p&gt;Let me share something personal: since I first started coding, I&#x27;ve had this recurring dream. A dream where I could simply talk to my computer, tell it what I want in plain language, and watch as it translates my intentions into working code. No syntax gymnastics. No hunting for semicolons. Just pure, frictionless creation.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Hey computer, refactor this module to use dependency injection instead of globals.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&amp;quot;Computer, optimize this database query, it&#x27;s running too slow.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&amp;quot;Add translation support to all user-facing strings in this module.&amp;quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For decades, this remained firmly in the realm of science fiction-something for Star Trek episodes where they casually ask the computer to &amp;quot;reconfigure the deflector dish&amp;quot; and it just... happens.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;DAMN, we&#x27;re just there now.&lt;&#x2F;strong&gt; Not in some distant future, not as a tech demo, but as a practical, everyday reality in my development workflow.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;real-world-context-nofidoc&quot;&gt;Real-World Context: Nofidoc&lt;&#x2F;h2&gt;
&lt;p&gt;A little context: In my free time, I&#x27;ve been pushing the boundaries of what&#x27;s possible with AI-assisted coding-well beyond just casual experiments. While I also use these workflows at work, Nofidoc has become my personal playground for exploring how far I can take this technology. It&#x27;s a space where I can try things that aren&#x27;t always ready for the spotlight, but the results have been too compelling not to share (even if I&#x27;m keeping things a bit low-key for now).&lt;&#x2F;p&gt;
&lt;p&gt;The codebase uses Qt for the UI components, has a wizard-based document import flow, and handles various document formats with a focus on PDFs. It&#x27;s exactly the kind of mid-sized C++ project where refactoring used to be tedious and error-prone.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-perfect-pairing&quot;&gt;The Perfect Pairing&lt;&#x2F;h2&gt;
&lt;p&gt;VS Code with GitHub Copilot doesn&#x27;t just assist your coding-it transforms it. No more wasting precious brain cycles on trivial tasks. No more tedious refactoring operations that make you question your career choices at 2 AM.&lt;&#x2F;p&gt;
&lt;p&gt;I recently needed to refactor the document import workflow to remove direct database dependencies in the wizard component. Why having that in the first place? Well, getting something proof-of-concept-ish is the answer. Anyways, this is a classic case of improving architecture by decoupling components, but it typically requires careful changes across multiple files and understanding the entire call hierarchy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;see-the-entire-workflow-in-action&quot;&gt;See The Entire Workflow In Action&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve recorded a full ~6-minute video showing the entire refactoring process from start to finish. You&#x27;ll see me:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Prompt Copilot with my refactoring requirements&lt;&#x2F;li&gt;
&lt;li&gt;Watch the initial code changes being proposed&lt;&#x2F;li&gt;
&lt;li&gt;Hit compilation errors (because real-world code is messy!)&lt;&#x2F;li&gt;
&lt;li&gt;Provide additional guidance to Copilot&lt;&#x2F;li&gt;
&lt;li&gt;Get a complete, working solution&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;video class=&quot;cast&quot; src=&quot;&#x2F;casts&#x2F;2025-04-27-vibe.webm&quot; controls&gt;
  Your browser does not support the video tag.
&lt;&#x2F;video&gt;
&lt;p&gt;What&#x27;s remarkable here is not just that Copilot could make the changes, but how the entire interaction feels like working with a senior developer who deeply understands your codebase.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-real-example-documentimportwizard-refactoring&quot;&gt;The Real Example: DocumentImportWizard Refactoring&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s a snapshot of what happened in the video. I needed to update the DatabaseWidget class to use the new API of our DocumentImportWizard that we had refactored to remove direct database dependencies. &lt;&#x2F;p&gt;
&lt;p&gt;Copilot analyzed the code and came up with this solution:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Before refactoring, direct database dependency:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;DatabaseWidget::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;onDocumentImportWizard&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; importWizard = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;DocumentImportWizard&lt;&#x2F;span&gt;&lt;span&gt;(_database, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    importWizard-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; After refactoring, using callback approach:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;DatabaseWidget::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;onDocumentImportWizard&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; importWizard = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;DocumentImportWizard&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    importWizard-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;setGetDocumentTypesCallback&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;]() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!_database)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;QList&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;DocumentType&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; docTypeService = _database-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;getDocumentTypeService&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!docTypeService)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;QList&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;DocumentType&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; docTypeService-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;getDocumentTypes&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    importWizard-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Copilot explained its reasoning:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;I&#x27;ve updated the onDocumentImportWizard() method in DatabaseWidget to use the new refactored API of our DocumentImportWizard class. The key changes were:&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;1. Removed passing the _database parameter directly to the DocumentImportWizard constructor&lt;&#x2F;em&gt;
&lt;em&gt;2. Added a call to setGetDocumentTypesCallback() with a lambda that:&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Checks if _database is valid&lt;&#x2F;li&gt;
&lt;li&gt;Gets the document type service from the database&lt;&#x2F;li&gt;
&lt;li&gt;Returns the document types list from the service&lt;&#x2F;li&gt;
&lt;li&gt;Returns an empty list if any step fails&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;This completes the refactoring work by updating all the calling code to use the new API. The change maintains the same functionality but with a cleaner design that removes direct dependencies on the database pointer.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;The implementation follows modern C++ practices by using a lambda to encapsulate the specific functionality needed (getting document types) while keeping the rest of the database access logic out of the wizard class. This makes the code more maintainable and easier to test.&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is exactly the kind of architectural improvement that typically takes deep understanding of both the codebase and software design principles. Yet Copilot produced it in seconds.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-key-lesson-human-ai-collaboration&quot;&gt;The Key Lesson: Human-AI Collaboration&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s the most important takeaway from my experience: &lt;strong&gt;AI tools are most powerful when paired with your domain expertise.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Just before that, I was debugging a frustrating issue with field registration in that document import wizard. The fields weren&#x27;t passing values between pages correctly. I asked Copilot to help fix the bug and it initially proposed an overly complex workaround that would have been a maintenance nightmare.&lt;&#x2F;p&gt;
&lt;p&gt;So I gave it a hint:&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;I think there&#x27;s an issue with the registerField calls for &#x27;importSuccessCount&#x27; and &#x27;importErrorCount&#x27;. The implementation doesn&#x27;t specify the property name correctly.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;And just like that, it had an &amp;quot;aha!&amp;quot; moment. It immediately identified the real issue:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Before (buggy implementation):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;registerField&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;importSuccessCount&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; After (Copilot&amp;#39;s correct fix):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;registerField&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;importSuccessCount&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;importSuccessCount&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This simple fix resolved the entire issue. The fix works because it properly uses the Qt property system (third parameter) as the remaining code and pages expected, whereas Copilot&#x27;s initial workaround was mega ugly - setting properties directly with setProperty() calls. With just a small hint about the actual problem, we were back on track. This perfectly illustrates why domain expertise remains critical - AI tools can suggest solutions, but knowing which ones make sense in your framework requires human judgment.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes AI tools need a gentle nudge in the right direction, and then they&#x27;re off to the races again.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;not-always-perfect-magic&quot;&gt;Not Always Perfect Magic&lt;&#x2F;h2&gt;
&lt;p&gt;Let me be real with you - it&#x27;s not all sunshine and rainbows. AI assistance sometimes misses the mark, and when it does, you need to steer it in the right direction. But I&#x27;ve found that:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The initial attempt is usually close&lt;&#x2F;li&gt;
&lt;li&gt;AI is exceptionally good at understanding feedback&lt;&#x2F;li&gt;
&lt;li&gt;With the right hints, it can quickly recover and find the optimal solution&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The collaboration workflow is what makes all the difference. Instead of wrestling with a tool, it feels like having a junior developer who&#x27;s eager to learn and quick to adapt.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-this-matters&quot;&gt;Why This Matters&lt;&#x2F;h2&gt;
&lt;p&gt;This isn&#x27;t just about saving time (though I saved HOURS). It&#x27;s about changing how we think about coding. When you can express your intent in natural language and have it accurately translated into code changes, you&#x27;re no longer programming computers-you&#x27;re conversing with them.&lt;&#x2F;p&gt;
&lt;p&gt;The barrier between thinking and implementing just got so much thinner.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-this-setup-yourself&quot;&gt;Getting This Setup Yourself&lt;&#x2F;h2&gt;
&lt;p&gt;Want this superpower? Here&#x27;s what you need:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;VS Code&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;GitHub Copilot&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A clear understanding of your codebase&lt;&#x2F;strong&gt; - To craft effective prompts&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;That&#x27;s it! No complex configuration, no elaborate plugin chains.&lt;&#x2F;p&gt;
&lt;p&gt;Oh, which model? Right now I am using Claude 3.7 - it&#x27;s so good.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-future-is-already-here&quot;&gt;The Future Is Already Here&lt;&#x2F;h2&gt;
&lt;p&gt;You know that saying about technology and magic? This is it. We&#x27;re witnessing the early days of a transformation in how software gets built. The tools are evolving to understand not just the syntax of our code, but the intent behind it.&lt;&#x2F;p&gt;
&lt;p&gt;Could I have written a complex bash script to do some of this refactoring? Maybe.
Could I have used search-and-replace with regex? Probably.
Would either approach have understood the semantic meaning of my code well enough to know which strings need translation? Absolutely not.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;&#x2F;h2&gt;
&lt;p&gt;Vibe coding isn&#x27;t just some feel-good developer term. It&#x27;s that perfect state where you and your tools are in sync, where expressing your intent feels natural and immediate. With GitHub Copilot and VS Code, I&#x27;m experiencing this daily while building Nofidoc.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re still doing manual refactoring in 2025, you&#x27;re not just missing out on productivity-you&#x27;re missing out on the pure joy of frictionless development.&lt;&#x2F;p&gt;
&lt;p&gt;Try it. Feel it. Vibe code.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>🚀 New Release: antispy SDK 2025.1.0</title>
        <published>2025-04-22T00:00:00+00:00</published>
        <updated>2025-04-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/posts/antispy-sdk-release/"/>
        <id>https://svnscha.de/posts/antispy-sdk-release/</id>
        
        <content type="html" xml:base="https://svnscha.de/posts/antispy-sdk-release/">&lt;p&gt;By day, I specialize in system insights and observability as part of the &lt;a href=&quot;https:&#x2F;&#x2F;uberagent.com&quot;&gt;uberAgent&lt;&#x2F;a&gt; team at Citrix. By night, I delve into paranoia engineering with the antispy SDK. Together with &lt;a href=&quot;https:&#x2F;&#x2F;www.windegger.wtf&#x2F;&quot;&gt;Rene Windegger&lt;&#x2F;a&gt;, we&#x27;ve been developing and maintaining this project for six years, continuously releasing updates since its inception. Today, we&#x27;re thrilled to introduce version 2025.1.0.&lt;&#x2F;p&gt;
&lt;p&gt;What began as a weekend experiment to confuse disassemblers has evolved into a robust SDK for developers who care deeply about safeguarding their binaries.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-new&quot;&gt;What&#x27;s New?&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;books-comprehensive-documentation&quot;&gt;📚 Comprehensive Documentation&lt;&#x2F;h3&gt;
&lt;p&gt;We&#x27;ve documented everything-every macro, every intricate detail of the virtual machine, and even the obscure compile-time tricks. Explore it all at &lt;a href=&quot;https:&#x2F;&#x2F;antispy.xyz&#x2F;docs&quot;&gt;antispy.xyz&#x2F;docs&lt;&#x2F;a&gt;. Plus, you can test examples live.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sparkles-compiler-explorer-integration&quot;&gt;✨ Compiler Explorer Integration&lt;&#x2F;h3&gt;
&lt;p&gt;Meet &lt;a href=&quot;https:&#x2F;&#x2F;play.antispy.xyz&quot;&gt;play.antispy.xyz&lt;&#x2F;a&gt;, your in-browser playground for experimenting with the SDK. Adjust macros, tweak compile options, and analyze disassembly to your heart&#x27;s content. Think of it as godbolt, but tailored for the paranoid.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;example&quot;&gt;Example&lt;&#x2F;h4&gt;
&lt;p&gt;Explore the demo showcasing &lt;code&gt;libantispy::encrypted_ptr&lt;&#x2F;code&gt;, a feature that compiles into 22 basic blocks of obfuscated code-serious protection in action.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;lt;antispy&#x2F;libantispy.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    libantispy::encrypted_pointer&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; ptr;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;casts&#x2F;2025-04-22-antispy-sdk-release-demo1.png&quot; alt=&quot;Demo 1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Try it yourself: &lt;a href=&quot;https:&#x2F;&#x2F;play.antispy.xyz&#x2F;z&#x2F;E3dh9aPr93zcfjMoW5oazMfnr9o5KxEqYGabEsY8vb46fzrj1fr1&quot;&gt;play.antispy.xyz - libantispy::encrypted_pointer&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Unlike &lt;code&gt;libantispy::encrypted_pointer&lt;&#x2F;code&gt;, the standard &lt;code&gt;std::shared_ptr&lt;&#x2F;code&gt; behaves quite differently, as demonstrated below:&lt;&#x2F;p&gt;
&lt;p&gt;After all, &lt;code&gt;std::shared_ptr&lt;&#x2F;code&gt; isn&#x27;t designed to be obfuscated, is it?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;casts&#x2F;2025-04-22-antispy-sdk-release-demo2.png&quot; alt=&quot;Demo 2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;brain-constexpr-code-generation&quot;&gt;🧠 Constexpr Code Generation&lt;&#x2F;h3&gt;
&lt;p&gt;The antispy virtual machine now supports full compile-time constexpr functionality. Transform data, encrypt logic, and generate obfuscation layers-all before runtime. Who needs CPU cycles anyway?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gear-updated-toolchains&quot;&gt;⚙️ Updated Toolchains&lt;&#x2F;h3&gt;
&lt;p&gt;We&#x27;ve modernized everything so you don&#x27;t have to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Android + iOS SDKs:&lt;&#x2F;strong&gt; ✅&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Outdated compilers:&lt;&#x2F;strong&gt; 🪦&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Legacy baggage:&lt;&#x2F;strong&gt; 🔥&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you&#x27;re still using GCC 4.x, well, good luck.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-antispy-sdk&quot;&gt;Why antispy SDK?&lt;&#x2F;h2&gt;
&lt;p&gt;Whether you&#x27;re building high-assurance binaries, implementing anti-reversing measures, or simply enjoy giving disassemblers a hard time, the antispy SDK is for you. It&#x27;s lean, battle-tested, and unapologetically opinionated. With proper documentation and a live explorer, there&#x27;s no better time to dive in.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;platforms-architectures&quot;&gt;Platforms &amp;amp; Architectures&lt;&#x2F;h3&gt;
&lt;p&gt;The antispy SDK is designed to work seamlessly across almost all major compiler platforms and CPU architectures, provided they support C++20. This includes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Windows:&lt;&#x2F;strong&gt; x86, x64, ARM64&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Linux:&lt;&#x2F;strong&gt; x86, x64, ARM64&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;macOS:&lt;&#x2F;strong&gt; ARM and Intel&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;iOS:&lt;&#x2F;strong&gt; Including tvOS, watchOS, visionOS&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Android:&lt;&#x2F;strong&gt; x86, x86_64, armeabi-v7a, armv8a&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Bare Metal SOCs:&lt;&#x2F;strong&gt; Fully supported&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;No matter your target platform, the antispy SDK ensures robust compatibility without compromising on performance or security.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;&#x2F;strong&gt; If C++ metaprogramming excites you and you believe binaries should fight back, this SDK is your perfect match.&lt;&#x2F;p&gt;
&lt;p&gt;Got feedback, feature requests? Let us know-we&#x27;re probably not sleeping anyway.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A Git feature I should&#x27;ve met sooner!</title>
        <published>2025-04-04T00:00:00+00:00</published>
        <updated>2025-04-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/posts/git-worktree/"/>
        <id>https://svnscha.de/posts/git-worktree/</id>
        
        <content type="html" xml:base="https://svnscha.de/posts/git-worktree/">&lt;h1 id=&quot;why-you-ask&quot;&gt;Why, You Ask?&lt;&#x2F;h1&gt;
&lt;p&gt;Because I thought I knew Git.
Like really. Branches? Merged. Rebased. Cherry-picked. Heck, I&#x27;ve even force-pushed into production (don&#x27;t judge me). I&#x27;ve danced the &lt;code&gt;git stash&lt;&#x2F;code&gt; tango more times than I care to admit, and I&#x27;ve rage-quit after realizing I checked out the wrong branch with uncommitted changes.&lt;&#x2F;p&gt;
&lt;p&gt;But then-then-I discovered &lt;code&gt;git worktree&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And everything changed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem-with-the-normal-waytm&quot;&gt;The Problem With the &amp;quot;Normal&amp;quot; Way™&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s say you&#x27;re working on a feature. You&#x27;re knee-deep in uncommitted changes, and suddenly you need to switch to another branch to hotfix or review something. What do you do?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git stash&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git checkout other-branch&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Try to remember what you were doing in your branch later.&lt;&#x2F;li&gt;
&lt;li&gt;Forget what you stashed and why.&lt;&#x2F;li&gt;
&lt;li&gt;Cry &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is the standard Git workflow we all just kind of accept. It&#x27;s chaotic good at best.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enter-git-worktree&quot;&gt;Enter: &lt;code&gt;git worktree&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;What if I told you... you could just check out multiple branches at the same time? Each in its own separate folder. No stash. No backflips. No existential dread.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;git worktree&lt;&#x2F;code&gt; is a built-in Git feature that lets you:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Check out multiple branches at once&lt;&#x2F;li&gt;
&lt;li&gt;Work on each one in its own directory&lt;&#x2F;li&gt;
&lt;li&gt;Keep your mental state and filesystem intact&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h2&gt;
&lt;p&gt;Create a new worktree for a feature branch&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; worktree add ..&#x2F;feature-x origin&#x2F;feature-x
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This checks out the &lt;code&gt;feature-x&lt;&#x2F;code&gt; branch (fetched from &lt;code&gt;origin&lt;&#x2F;code&gt;) into a new directory &lt;code&gt;..&#x2F;feature-x&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If it&#x27;s a new feature you start locally, do this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; worktree add ..&#x2F;feature-x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span&gt; feature-x
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This creates a new local branch &lt;code&gt;feature-x&lt;&#x2F;code&gt; from your current &lt;code&gt;HEAD&lt;&#x2F;code&gt; (usually &lt;code&gt;main&lt;&#x2F;code&gt;) and checks it out into &lt;code&gt;..&#x2F;feature-x&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Wow. 🥳 No more &amp;quot;wait lemme stash real quick.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;Now you can commit your fix, push it, and go back to your mess later. Like a civilized developer.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;list-all-worktrees&quot;&gt;List all worktrees&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; worktree list
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Because you will forget what you spun up after the third coffee.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-the-catch&quot;&gt;What&#x27;s the Catch?&lt;&#x2F;h2&gt;
&lt;p&gt;Honestly? Not much. A few things to keep in mind:&lt;&#x2F;p&gt;
&lt;p&gt;You can&#x27;t check out the same branch twice. Git will yell at you. That&#x27;s fair.&lt;&#x2F;p&gt;
&lt;p&gt;Deleting a worktree is easy: just &lt;code&gt;git worktree remove ..&#x2F;feature-x&lt;&#x2F;code&gt; (the directory) and that&#x27;s it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-you-need-this-in-your-life&quot;&gt;Why You Need This in Your Life&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re working on multiple features, doing code reviews locally, fixing stuff mid-feature, or just trying to keep your brain from melting-&lt;code&gt;git worktree&lt;&#x2F;code&gt; is the gift you didn&#x27;t know Git included.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;No more stash juggling.&lt;&#x2F;li&gt;
&lt;li&gt;No more &amp;quot;which terminal had which branch again?&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;No more &amp;quot;accidentally committed to main&amp;quot; horror stories.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Just clean, parallel workspaces from a single clone.&lt;&#x2F;p&gt;
&lt;p&gt;Use it. Love it. Regret not learning it sooner.
I know I did.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Windows: Install integrated OpenSSH Server</title>
        <published>2025-04-03T00:00:00+00:00</published>
        <updated>2025-04-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/notes/windows-openssh-server/"/>
        <id>https://svnscha.de/notes/windows-openssh-server/</id>
        
        <content type="html" xml:base="https://svnscha.de/notes/windows-openssh-server/">&lt;p&gt;Tired of everyone SSHing into Linux? Flip the script: SSH into Windows from your Linux box. Works great with VSCode Remote too. Here&#x27;s how to enable the built-in OpenSSH server on Windows.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;step-1-check-installed-openssh-components&quot;&gt;Step 1: Check Installed OpenSSH Components&lt;&#x2F;h3&gt;
&lt;p&gt;First, open a PowerShell window with administrator privileges. Let&#x27;s see what&#x27;s already installed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Get-WindowsCapability -Online &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Where-Object&lt;&#x2F;span&gt;&lt;span&gt; Name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -like &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;OpenSSH*&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You might see output indicating that the client is installed but not the server:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;color:#abb2bf;&quot;&gt;&lt;code&gt;&lt;span&gt;Name  : OpenSSH.Client~~~~0.0.1.0
&lt;&#x2F;span&gt;&lt;span&gt;State : Installed
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Name  : OpenSSH.Server~~~~0.0.1.0
&lt;&#x2F;span&gt;&lt;span&gt;State : NotPresent
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;step-2-install-the-openssh-server&quot;&gt;Step 2: Install the OpenSSH Server&lt;&#x2F;h3&gt;
&lt;p&gt;If the server isn&#x27;t present, let&#x27;s bring it on board. Run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Add-WindowsCapability -Online -Name&lt;&#x2F;span&gt;&lt;span&gt; OpenSSH.Server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~~~~&lt;&#x2F;span&gt;&lt;span&gt;0.0.1.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;step-3-start-and-enable-the-ssh-server&quot;&gt;Step 3: Start and Enable the SSH Server&lt;&#x2F;h3&gt;
&lt;p&gt;Now, let&#x27;s get the &lt;code&gt;sshd&lt;&#x2F;code&gt; service up and running:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Start-Service&lt;&#x2F;span&gt;&lt;span&gt; sshd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And ensure it starts automatically with Windows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Set-Service -Name&lt;&#x2F;span&gt;&lt;span&gt; sshd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -StartupType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;Automatic&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s it.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Fedora: Remove old kernel versions</title>
        <published>2025-04-02T00:00:00+00:00</published>
        <updated>2025-04-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/notes/fedora-remove-unused-kernel/"/>
        <id>https://svnscha.de/notes/fedora-remove-unused-kernel/</id>
        
        <content type="html" xml:base="https://svnscha.de/notes/fedora-remove-unused-kernel/">&lt;p&gt;Sometimes, kernel updates pile up like empty pizza boxes on a lazy Sunday. If you&#x27;re running a Fedora or RHEL-based system, here&#x27;s how you can check which kernels are installed and clean up the old ones - keeping only the one you&#x27;re currently using.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;step-1-list-all-installed-kernels&quot;&gt;Step 1: List all installed kernels&lt;&#x2F;h3&gt;
&lt;p&gt;To see which &lt;code&gt;kernel-core&lt;&#x2F;code&gt; packages are installed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;rpm -q&lt;&#x2F;span&gt;&lt;span&gt; kernel-core
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will output a list of all installed kernel versions. You&#x27;ll likely see several if you&#x27;ve been updating your system regularly without cleaning up.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;step-2-check-the-currently-running-kernel&quot;&gt;Step 2: Check the currently running kernel&lt;&#x2F;h3&gt;
&lt;p&gt;Before we start nuking kernels, let&#x27;s make sure we know which one we&#x27;re actually running:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;uname -a
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The version string (e.g., &lt;code&gt;6.13.8-200.fc41.x86_64&lt;&#x2F;code&gt;) should match one of the installed kernels you saw in the previous step. Don&#x27;t delete this one unless you&#x27;re aiming for chaos.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;step-3-remove-old-kernels&quot;&gt;Step 3: Remove old kernels&lt;&#x2F;h3&gt;
&lt;p&gt;Now it&#x27;s cleanup time. For every kernel version except the currently running one, run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; dnf remove kernel-core-&amp;lt;version&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s it.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>C++: How to measure code coverage with lcov and GTest</title>
        <published>2025-03-25T00:00:00+00:00</published>
        <updated>2025-03-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/posts/cpp-code-coverage/"/>
        <id>https://svnscha.de/posts/cpp-code-coverage/</id>
        
        <content type="html" xml:base="https://svnscha.de/posts/cpp-code-coverage/">&lt;h1 id=&quot;why-you-ask&quot;&gt;Why, You Ask?&lt;&#x2F;h1&gt;
&lt;p&gt;Because you want to know which parts of your C++ code are actually being tested – not just assumed to be. Code coverage isn&#x27;t about perfection, but about confidence. And with the right setup, you can easily visualize what&#x27;s being tested and what&#x27;s quietly collecting dust.&lt;&#x2F;p&gt;
&lt;p&gt;In this guide, we&#x27;ll walk through:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Setting up &lt;code&gt;lcov&lt;&#x2F;code&gt; and GTest&lt;&#x2F;li&gt;
&lt;li&gt;Writing effective coverage-focused tests&lt;&#x2F;li&gt;
&lt;li&gt;Running the tests and generating reports&lt;&#x2F;li&gt;
&lt;li&gt;Interpreting results and achieving real insight&lt;&#x2F;li&gt;
&lt;li&gt;Automating it all via GitHub Actions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;package-try-it-yourself&quot;&gt;📦 Try It Yourself&lt;&#x2F;h2&gt;
&lt;p&gt;Check out the working example repository here:&lt;&#x2F;p&gt;
&lt;p&gt;👉 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;svnscha&#x2F;cpp-coverage-example&quot;&gt;github.com&#x2F;svnscha&#x2F;cpp-coverage-example&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It contains:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A minimal &lt;code&gt;MyQueue&lt;&#x2F;code&gt; class&lt;&#x2F;li&gt;
&lt;li&gt;Unit tests using GTest&lt;&#x2F;li&gt;
&lt;li&gt;Full &lt;code&gt;lcov&lt;&#x2F;code&gt; and &lt;code&gt;genhtml&lt;&#x2F;code&gt; integration&lt;&#x2F;li&gt;
&lt;li&gt;A GitHub Actions workflow for automated code coverage with a threshold&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;1-install-required-tools&quot;&gt;1. Install Required Tools&lt;&#x2F;h2&gt;
&lt;p&gt;Make sure your environment has:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lcov&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;A C++ compiler (GCC or Clang)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cmake&lt;&#x2F;code&gt;, &lt;code&gt;ninja&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;GTest (or install &lt;code&gt;libgtest-dev&lt;&#x2F;code&gt; on Ubuntu)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;2-build-with-coverage-instrumentation&quot;&gt;2. Build with Coverage Instrumentation&lt;&#x2F;h2&gt;
&lt;p&gt;To generate coverage data, compile your code with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--coverage&lt;&#x2F;code&gt;: Coverage instrumentation&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-g&lt;&#x2F;code&gt;: Debug information&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-O0&lt;&#x2F;code&gt;: No optimization (to avoid inlining, etc.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;tools-minimal-cmake-snippet&quot;&gt;🛠 Minimal CMake Snippet&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;cmake&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-cmake &quot;&gt;&lt;code class=&quot;language-cmake&quot; data-lang=&quot;cmake&quot;&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;option&lt;&#x2F;span&gt;&lt;span&gt;(ENABLE_COVERAGE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Enable code coverage reporting&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;OFF)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;enable_coverage &lt;&#x2F;span&gt;&lt;span&gt;target)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(ENABLE_COVERAGE AND CMAKE_CXX_COMPILER_ID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;MATCHES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;GNU|Clang&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;target_compile_options&lt;&#x2F;span&gt;&lt;span&gt;(${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;PRIVATE &lt;&#x2F;span&gt;&lt;span&gt;--coverage -O0 -g)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;target_link_options&lt;&#x2F;span&gt;&lt;span&gt;(${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;PRIVATE &lt;&#x2F;span&gt;&lt;span&gt;--coverage)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;endif&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;endfunction&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;enable_testing&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;add_library&lt;&#x2F;span&gt;&lt;span&gt;(MyLibrary ...)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;add_executable&lt;&#x2F;span&gt;&lt;span&gt;(MyTests ...)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;target_link_libraries&lt;&#x2F;span&gt;&lt;span&gt;(MyTests &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;PRIVATE &lt;&#x2F;span&gt;&lt;span&gt;MyLibrary GTest::gtest_main)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;include&lt;&#x2F;span&gt;&lt;span&gt;(GTest)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;gtest_discover_tests&lt;&#x2F;span&gt;&lt;span&gt;(MyTests)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;enable_coverage&lt;&#x2F;span&gt;&lt;span&gt;(MyLibrary)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;enable_coverage&lt;&#x2F;span&gt;&lt;span&gt;(MyTests)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;3-write-tests-that-actually-trigger-all-code-paths&quot;&gt;3. Write Tests That Actually Trigger All Code Paths&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a small utility class as an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;MyQueue
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    { 
&lt;&#x2F;span&gt;&lt;span&gt;        _q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(val); 
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Pop&lt;&#x2F;span&gt;&lt;span&gt;() 
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(_q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        _q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;IsEmpty&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; _q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;(); }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    std::queue&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; _q;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now test both normal and edge cases:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(MyQueueTest, PopWhenEmpty) {
&lt;&#x2F;span&gt;&lt;span&gt;    MyQueue q;
&lt;&#x2F;span&gt;&lt;span&gt;    q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Pop&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Hit the early return
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;IsEmpty&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;(MyQueueTest, PushAndPop) {
&lt;&#x2F;span&gt;&lt;span&gt;    MyQueue q;
&lt;&#x2F;span&gt;&lt;span&gt;    q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;EXPECT_FALSE&lt;&#x2F;span&gt;&lt;span&gt;(q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;IsEmpty&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;EXPECT_TRUE&lt;&#x2F;span&gt;&lt;span&gt;(q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;IsEmpty&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;4-run-tests-and-generate-coverage-report&quot;&gt;4. Run Tests and Generate Coverage Report&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;cmake -B build -DENABLE_COVERAGE=ON -DCMAKE_BUILD_TYPE=Debug
&lt;&#x2F;span&gt;&lt;span&gt;cmake --build build
&lt;&#x2F;span&gt;&lt;span&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;ctest &lt;&#x2F;span&gt;&lt;span&gt;--output-on-failure
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then generate the coverage report:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;lcov --directory . --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;capture &lt;&#x2F;span&gt;&lt;span&gt;--output-file coverage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;info &lt;&#x2F;span&gt;&lt;span&gt;--rc geninfo_auto_base=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;--ignore-errors mismatch
&lt;&#x2F;span&gt;&lt;span&gt;lcov --remove coverage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;&#x2F;usr&#x2F;*&amp;#39; &amp;#39;*&#x2F;tests&#x2F;*&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;--output-file coverage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;filtered&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;info
&lt;&#x2F;span&gt;&lt;span&gt;genhtml coverage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;filtered&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;info &lt;&#x2F;span&gt;&lt;span&gt;--output-directory coverage-report
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Open this in your browser:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;color:#abb2bf;&quot;&gt;&lt;code&gt;&lt;span&gt;build&#x2F;coverage-report&#x2F;index.html
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;video class=&quot;cast&quot; src=&quot;&#x2F;casts&#x2F;cpp-coverage-example.webm&quot; controls&gt;
  Your browser does not support the video tag.
&lt;&#x2F;video&gt;
&lt;h2 id=&quot;5-automation&quot;&gt;5. Automation&lt;&#x2F;h2&gt;
&lt;p&gt;Now, having the coverage report in place is a great start. But it&#x27;s not enough to just have the coverage report. You need to automate it so that every time you run your tests, you get a detailed report of what was covered and what wasn&#x27;t.&lt;&#x2F;p&gt;
&lt;p&gt;To get started, you can setup a GitHub workflow with threshold tests, upload the reports or do post-processing on the report.&lt;&#x2F;p&gt;
&lt;p&gt;Either way, the key is to have a way to run tests and generate reports. Here&#x27;s an example workflow:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;svnscha&#x2F;cpp-coverage-example&#x2F;blob&#x2F;main&#x2F;.github&#x2F;workflows&#x2F;coverage.yml&quot;&gt;.github&#x2F;workflows&#x2F;coverage.yml&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;svnscha&#x2F;cpp-coverage-example&#x2F;pull&#x2F;1&quot;&gt;Example Pull Request failing because of missing coverage&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;svnscha&#x2F;cpp-coverage-example&#x2F;pull&#x2F;2&quot;&gt;Example Pull Request passing coverage tests&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Step&lt;&#x2F;th&gt;&lt;th&gt;What You Did&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1. Install&lt;&#x2F;td&gt;&lt;td&gt;Set up &lt;code&gt;lcov&lt;&#x2F;code&gt;, gtest, gcc, and cmake&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2. Build&lt;&#x2F;td&gt;&lt;td&gt;Compiled with --coverage and no optimizations&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3. Test&lt;&#x2F;td&gt;&lt;td&gt;Hit both happy paths and edge cases&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4. Report&lt;&#x2F;td&gt;&lt;td&gt;Generated detailed HTML coverage report&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Code coverage doesn&#x27;t guarantee perfect tests, but it gives you visibility. When paired with thoughtful test cases (especially edge cases), it helps ensure your code behaves correctly - even when things go sideways.&lt;&#x2F;p&gt;
&lt;p&gt;Even small utility classes deserve this level of care.&lt;&#x2F;p&gt;
&lt;p&gt;And with &lt;code&gt;lcov&lt;&#x2F;code&gt;, you can turn &amp;quot;I think I tested this&amp;quot; into &amp;quot;Yes, this line has been executed 12 times during CI.&amp;quot;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Exploring AI: Self Hosted LLM</title>
        <published>2025-03-17T00:00:00+00:00</published>
        <updated>2025-03-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/posts/self-hosted-llm/"/>
        <id>https://svnscha.de/posts/self-hosted-llm/</id>
        
        <content type="html" xml:base="https://svnscha.de/posts/self-hosted-llm/">&lt;h1 id=&quot;why-you-ask&quot;&gt;Why, You Ask?&lt;&#x2F;h1&gt;
&lt;p&gt;So, I decided to self-host an LLM. Why? Every time you use an online AI model, you&#x27;re handing over your data to some company. Whether it&#x27;s casual conversations, coding snippets, or business-related queries, everything you type is potentially being logged, analyzed, or even used to train future models. No thanks.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, I prefer to keep things local. Also, I have an RTX ADA 4000 with 20GB of memory sitting here, so why not put it to good use?&lt;&#x2F;p&gt;
&lt;p&gt;Enter &lt;a href=&quot;https:&#x2F;&#x2F;ollama.com&#x2F;&quot;&gt;Ollama&lt;&#x2F;a&gt;, an absurdly flexible service that makes running LLMs locally a breeze. Combine that with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-webui&#x2F;open-webui&quot;&gt;Open WebUI&lt;&#x2F;a&gt;, which ties everything together into a neat little interface, and of course, my go-to Nginx reverse proxy for easy access.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s break down the setup.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-1-install-ollama&quot;&gt;Step 1: Install Ollama&lt;&#x2F;h2&gt;
&lt;p&gt;Ollama makes deploying LLMs locally ridiculously simple. Here&#x27;s how to install it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;curl -fsSL&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;ollama.com&#x2F;install.sh | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will install Ollama and set up everything you need to start running models locally. Want to make sure it&#x27;s working? Just run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ollama&lt;&#x2F;span&gt;&lt;span&gt; run codellama:13b
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you see an interactive prompt, congrats - you&#x27;ve got a local LLM running!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-2-install-open-webui&quot;&gt;Step 2: Install Open WebUI&lt;&#x2F;h2&gt;
&lt;p&gt;Ollama is great, but a web interface makes it even better. That&#x27;s where Open WebUI comes in. It gives you a sleek, chat-like interface to interact with your models.&lt;&#x2F;p&gt;
&lt;p&gt;To install Open WebUI manually without Docker, follow these steps:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-create-a-virtual-environment&quot;&gt;1. Create a Virtual Environment&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;python3 -m&lt;&#x2F;span&gt;&lt;span&gt; venv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;openwebui-venv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;source &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;openwebui-venv&#x2F;bin&#x2F;activate
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-install-open-webui&quot;&gt;2. Install Open WebUI&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span&gt; install open-webui
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-create-a-systemd-service&quot;&gt;3. Create a Systemd Service&lt;&#x2F;h3&gt;
&lt;p&gt;To make sure Open WebUI runs on startup, create a systemd service file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; nano &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;openwebui.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Paste the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;[Unit]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Description&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Open &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;WebUI&lt;&#x2F;span&gt;&lt;span&gt; Service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;After&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;network.target
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;[Service]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;USER
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Group&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;USER
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;WorkingDirectory&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;home&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;USER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;openwebui-venv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ExecStart&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;home&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;USER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;openwebui-venv&#x2F;bin&#x2F;open-webui
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Restart&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;always
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;[Install]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;WantedBy&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;multi-user.target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Save and exit, then reload systemd and enable the service:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl daemon-reload
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl enable openwebui.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl start openwebui.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;step-3-reverse-proxy-with-nginx&quot;&gt;Step 3: Reverse Proxy with Nginx&lt;&#x2F;h2&gt;
&lt;p&gt;Now, let&#x27;s make accessing our LLM easier by setting up an Nginx reverse proxy. This way, we can reach Open WebUI without exposing it directly.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a basic Nginx config:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;color:#abb2bf;&quot;&gt;&lt;code&gt;&lt;span&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    listen 443 ssl;
&lt;&#x2F;span&gt;&lt;span&gt;    server_name chat.example.com;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    location &#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_pass http:&#x2F;&#x2F;localhost:8080;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header Host $host;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header X-Real-IP $remote_addr;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Reload Nginx with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl restart nginx
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, you can access your self-hosted LLM via &lt;code&gt;https:&#x2F;&#x2F;chat.example.com&lt;&#x2F;code&gt;. Fancy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;you-own-your-data-now&quot;&gt;You Own Your Data Now&lt;&#x2F;h2&gt;
&lt;p&gt;One of the biggest advantages of self-hosting an LLM? Your data stays with you.&lt;&#x2F;p&gt;
&lt;p&gt;No sending queries to an external API, no third-party tracking what you&#x27;re asking, no potential leaks of sensitive information. It&#x27;s all running on your hardware, fully under your control. Whether you&#x27;re experimenting with code, processing confidential documents, or just having fun chatting with AI, everything stays local.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;model-sizes-performance&quot;&gt;Model Sizes &amp;amp; Performance&lt;&#x2F;h2&gt;
&lt;p&gt;Of course, different models come with different memory requirements. Here&#x27;s what I&#x27;m running on my RTX ADA 4000 and how much VRAM they use:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;color:#abb2bf;&quot;&gt;&lt;code&gt;&lt;span&gt;NAME             ID              SIZE      PROCESSOR    UNTIL              
&lt;&#x2F;span&gt;&lt;span&gt;codellama:7b     8fdf8f752f6e    9.4 GB    100% GPU     2 minutes from now    
&lt;&#x2F;span&gt;&lt;span&gt;codellama:13b    9f438cb9cd58    15 GB     100% GPU     4 minutes from now    
&lt;&#x2F;span&gt;&lt;span&gt;gemma3:12b       6fd036cefda5    13 GB     100% GPU     4 minutes from now    
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This means I can comfortably run mid-sized models like &lt;code&gt;codellama:13b&lt;&#x2F;code&gt; while keeping things snappy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;choosing-the-right-gpu&quot;&gt;Choosing the Right GPU&lt;&#x2F;h2&gt;
&lt;p&gt;Picking the right GPU is all about balancing performance, VRAM, and cost - because, let&#x27;s be honest, unless you&#x27;re running an AI research lab, you&#x27;re not dropping $30,000 on an H100.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a quick breakdown of solid options:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;NVIDIA RTX 3090 - Powerful, with 24 GB of VRAM, but it&#x27;s last-gen. ($$)&lt;&#x2F;li&gt;
&lt;li&gt;NVIDIA RTX 4090 - Even more powerful, with 24 GB of VRAM and better efficiency. ($$$)&lt;&#x2F;li&gt;
&lt;li&gt;NVIDIA RTX 5090 - Even more and more powerful, with 24 GB of VRAM and better efficiency. ($$$$)&lt;&#x2F;li&gt;
&lt;li&gt;NVIDIA RTX 4000 ADA Generation - Less powerful, but 20 GB of VRAM, and a low-profile card. ($)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now, why the ADA 4000? While the RTX 5090 is the fastest in raw compute power, VRAM is king for training AI models. The ADA 4000&#x27;s 20 GB VRAM gives you enough room for Stable Diffusion training, larger batch sizes, and AI experiments, without hitting the limits of other consumer GPUs such as 3080 (10 GB).&lt;&#x2F;p&gt;
&lt;p&gt;Performance-wise, the 4090 and 5090 has more horsepower, but for training workloads where memory matters more than raw speed, the ADA 4000 is the more practical and cost-efficient choice. Plus, lower power consumption makes it a better long-term option if you&#x27;re running AI workloads frequently. Also, the physical size - I mean it&#x27;s a low profile card. Small, fits perfectly into any case.&lt;&#x2F;p&gt;
&lt;p&gt;At the end of the day, if you&#x27;re serious about AI training and need a balance of VRAM, price, and efficiency, the ADA 4000 is the way to get started.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example&quot;&gt;Example&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;asking-codellama-13b&quot;&gt;Asking codellama:13b&lt;&#x2F;h3&gt;
&lt;p&gt;Prompt: &lt;code&gt;implement fibonacci in python and also some unit tests using pytest&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;video class=&quot;cast&quot; src=&quot;&#x2F;casts&#x2F;codellama-13b-fibonacci.webm&quot; controls&gt;
  Your browser does not support the video tag.
&lt;&#x2F;video&gt;
&lt;h3 id=&quot;asking-gemma3-12b&quot;&gt;Asking gemma3:12b&lt;&#x2F;h3&gt;
&lt;p&gt;Prompt: &lt;code&gt;implement fibonacci in python and also some unit tests using pytest&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;video class=&quot;cast&quot; src=&quot;&#x2F;casts&#x2F;gemma3-12b-fibonacci.webm&quot; controls&gt;
  Your browser does not support the video tag.
&lt;&#x2F;video&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;&#x2F;h2&gt;
&lt;p&gt;With an RTX ADA 4000, Ollama, Open WebUI, and an Nginx reverse proxy, I now have an AI-powered assistant running entirely on my own hardware. No subscriptions, no cloud dependencies, just raw, local AI power. If you&#x27;re serious about AI and privacy, setting this up is a no-brainer. Give it a try, and let your GPU do some work.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>PowerShell with oh-my-posh</title>
        <published>2024-11-16T00:00:00+00:00</published>
        <updated>2024-11-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/posts/powershell-oh-my-posh/"/>
        <id>https://svnscha.de/posts/powershell-oh-my-posh/</id>
        
        <content type="html" xml:base="https://svnscha.de/posts/powershell-oh-my-posh/">&lt;h1 id=&quot;why-you-ask&quot;&gt;Why, You Ask?&lt;&#x2F;h1&gt;
&lt;p&gt;So, I&#x27;m running Fedora, but here&#x27;s the twist — I&#x27;m using PowerShell even on Linux. Why? Because I love having a consistent shell experience, no matter where I&#x27;m working. Workstations, VMs, devcontainers or Windows — PowerShell is my go-to shell, and I want it to look and behave the same everywhere. Enter &lt;a href=&quot;https:&#x2F;&#x2F;ohmyposh.dev&#x2F;&quot;&gt;oh-my-posh&lt;&#x2F;a&gt;, the perfect companion to give PowerShell some style and functionality.&lt;&#x2F;p&gt;
&lt;p&gt;Let me walk you through how I set it up with &lt;a href=&quot;https:&#x2F;&#x2F;www.nerdfonts.com&#x2F;font-downloads&quot;&gt;Cascadia Code Nerd Font&lt;&#x2F;a&gt; and configured KDE Konsole for a smooth experience. Spoiler alert: it&#x27;s simple but super effective.&lt;&#x2F;p&gt;
&lt;p&gt;Oh and guess what: This all works on Windows using Windows Terminal, too.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-1-install-oh-my-posh&quot;&gt;Step 1: Install oh-my-posh&lt;&#x2F;h2&gt;
&lt;p&gt;First, we need to install oh-my-posh. It&#x27;s as easy as running this command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;curl -s&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;ohmyposh.dev&#x2F;install.sh | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;bash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This script downloads the latest version of oh-my-posh and installs it. Feel free to inspect the script if you&#x27;re cautious. If you&#x27;re running Windows the installation is slightly different, but I guess you figure this out.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-2-install-cascadia-code-nerd-font&quot;&gt;Step 2: Install Cascadia Code Nerd Font&lt;&#x2F;h2&gt;
&lt;p&gt;oh-my-posh relies on a Nerd Font for its icons and styling. I chose Cascadia Code Nerd Mono because it&#x27;s clean and works beautifully across different environments.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;oh-my-posh&lt;&#x2F;span&gt;&lt;span&gt; font install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Set the Font in KDE Konsole:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Open Konsole.&lt;&#x2F;li&gt;
&lt;li&gt;Go to Settings &amp;gt; Edit Current Profile &amp;gt; Appearance.&lt;&#x2F;li&gt;
&lt;li&gt;Click Edit Font and select Cascadia Code Nerd Mono.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Set the Font in Windows Terminal:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Open Settings&lt;&#x2F;li&gt;
&lt;li&gt;Navigate to Font and choose Cascadia Code Nerd Mono.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;step-3-seamlessly-integrate-powershell-with-oh-my-posh&quot;&gt;Step 3: Seamlessly integrate PowerShell with oh-my-posh&lt;&#x2F;h2&gt;
&lt;p&gt;To make oh-my-posh work seamlessly in PowerShell, edit your &lt;code&gt;$PROFILE&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;code &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;PROFILE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add the following lines to load oh-my-posh with your configuration:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;oh-my-posh init pwsh --config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;path&#x2F;to&#x2F;oh-my-posh.json&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;Invoke-Expression
&lt;&#x2F;span&gt;&lt;span&gt;clear
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This initializes oh-my-posh with your chosen theme and clears the screen for a clean start.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;step-4-my-oh-my-posh-configuration&quot;&gt;Step 4: My oh-my-posh configuration&lt;&#x2F;h3&gt;
&lt;p&gt;Here&#x27;s my oh-my-posh config file. It&#x27;s simple but does the job perfectly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$schema&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;JanDeDobbeleer&#x2F;oh-my-posh&#x2F;main&#x2F;themes&#x2F;schema.json&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;blocks&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;prompt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;alignment&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;left&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;segments&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;properties&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;cache_duration&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;none&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;style&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;full&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          },
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;template&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;{{ .Path }} &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;foreground&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;#77E4F7&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;path&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;style&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;plain&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;properties&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;cache_duration&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;none&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          },
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;template&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;{{ .HEAD }} &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;foreground&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;#FFE700&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;git&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;style&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;plain&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;properties&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;cache_duration&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;none&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          },
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;template&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$ &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;foreground&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;#43D426&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;text&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;style&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;plain&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      ]
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  ],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;version&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Path Segment: Displays the current directory in a bright cyan.&lt;&#x2F;li&gt;
&lt;li&gt;Git Segment: Shows the current Git branch in yellow, if applicable.&lt;&#x2F;li&gt;
&lt;li&gt;Prompt Character: Displays a green $, keeping it clean and minimal.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;step-5-optional-create-a-new-profile-for-powershell-in-konsole&quot;&gt;Step 5: (optional) Create a New Profile for PowerShell in Konsole&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s set up a dedicated profile for PowerShell in Konsole:&lt;&#x2F;p&gt;
&lt;p&gt;Duplicate an Existing Profile:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;In Konsole, go to Settings &amp;gt; Manage Profiles.&lt;&#x2F;li&gt;
&lt;li&gt;Select your default profile and click Duplicate.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Configure the PowerShell Profile:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rename it to PowerShell.&lt;&#x2F;li&gt;
&lt;li&gt;Set the command to pwsh.&lt;&#x2F;li&gt;
&lt;li&gt;Under Appearance, set the font to Cascadia Code Nerd Mono.&lt;&#x2F;li&gt;
&lt;li&gt;Save your changes.&lt;&#x2F;li&gt;
&lt;li&gt;Set it as default (optional)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;&#x2F;h2&gt;
&lt;p&gt;With oh-my-posh, Cascadia Code Nerd Font, and a dedicated profile in KDE Konsole, my PowerShell setup is consistent, stylish, and super effective. Whether I&#x27;m on Fedora, a VM, or a devcontainer, my terminal always feels like home.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re a PowerShell fan like me, give this setup a try. Trust me, your terminal (and your productivity) will thank you.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Moving to Fedora: Automating Discord Updates with Ansible</title>
        <published>2024-11-15T00:00:00+00:00</published>
        <updated>2024-11-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/posts/fedora-discord-ansible/"/>
        <id>https://svnscha.de/posts/fedora-discord-ansible/</id>
        
        <content type="html" xml:base="https://svnscha.de/posts/fedora-discord-ansible/">&lt;h2 id=&quot;why-you-ask&quot;&gt;Why, You Ask?&lt;&#x2F;h2&gt;
&lt;p&gt;So, you&#x27;ve found yourself running Fedora and decided to install Discord, huh? Great choice — Fedora is fantastic. But then you realize Discord&#x27;s tarball updates are a hassle. Every week, it&#x27;s the same story: download, extract, and pray you didn&#x27;t miss a step. Tedious, right?&lt;&#x2F;p&gt;
&lt;p&gt;Fear not! This is where Ansible swoops in to save the day. Let&#x27;s walk through a playbook that automates the entire process of installing and updating Discord on Fedora. Say goodbye to manual labor and hello to efficiency.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-1-understanding-the-process&quot;&gt;Step 1: Understanding the Process&lt;&#x2F;h2&gt;
&lt;p&gt;Discord on Linux isn&#x27;t as straightforward as we&#x27;d like. Flatpak is an option, but it can be slow with updates or cause compatibility issues. For those of us who prefer the direct tarball approach, we need a way to automate the mess. With Ansible, we can ensure Discord is always up-to-date with just one command. No more hunting for the latest download link or worrying about cleaning up old versions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-2-the-playbook&quot;&gt;Step 2: The Playbook&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s an Ansible playbook to make your life easier. It handles everything — downloading the tarball, extracting it to the proper location, and cleaning up afterward.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Install and Update Discord on Fedora 41 using Ansible
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;hosts&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;localhost
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;become&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tasks&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Ensure &#x2F;usr&#x2F;share&#x2F;discord is removed if it exists
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;usr&#x2F;share&#x2F;discord
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;absent
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Download Discord tarball
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;get_url&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;discord.com&#x2F;api&#x2F;download&#x2F;stable?platform=linux&amp;amp;format=tar.gz&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dest&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;tmp&#x2F;discord.tar.gz&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mode&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;0644&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Create &#x2F;usr&#x2F;share&#x2F;discord directory
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;usr&#x2F;share&#x2F;discord
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;directory
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mode&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;0755&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Extract Discord tarball to &#x2F;usr&#x2F;share&#x2F;discord
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;unarchive&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;tmp&#x2F;discord.tar.gz&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dest&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;usr&#x2F;share&#x2F;discord&#x2F;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;remote_src&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;extra_opts&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;--strip-components=1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;creates&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;usr&#x2F;share&#x2F;discord&#x2F;discord&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Clean up temporary files
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;tmp&#x2F;discord.tar.gz&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;absent
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;step-3-what-this-playbook-does&quot;&gt;Step 3: What This Playbook Does&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Step 1: If Discord is already installed, it removes the existing files to prevent conflicts.&lt;&#x2F;li&gt;
&lt;li&gt;Step 2: It downloads the latest stable Discord tarball directly from the official API.&lt;&#x2F;li&gt;
&lt;li&gt;Step 3: Creates the required directory at &lt;code&gt;&#x2F;usr&#x2F;share&#x2F;discord&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Step 4: Extracts the tarball into &lt;code&gt;&#x2F;usr&#x2F;share&#x2F;discord&lt;&#x2F;code&gt;, stripping unnecessary folder components.&lt;&#x2F;li&gt;
&lt;li&gt;Step 5: Cleans up temporary files, leaving your system tidy.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;a-note-about-bash-aliases&quot;&gt;A Note About Bash Aliases&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re like me and love shortcuts, consider adding a bash alias to streamline running the playbook. This way, updating Discord becomes as simple as typing a single command. Here&#x27;s how you can set it up:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cat ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc.d&#x2F;alias.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;ansible-venv&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;. ~&#x2F;repos&#x2F;ansible&#x2F;.venv&#x2F;bin&#x2F;activate&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;update-discord&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;ansible-venv &amp;amp;&amp;amp; ansible-playbook ~&#x2F;repos&#x2F;ansible&#x2F;update-discord.yml --connection=local -K&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this in place:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible-venv&lt;&#x2F;code&gt; activates your virtual environment for Ansible.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;update-discord&lt;&#x2F;code&gt; runs the playbook with local connection and prompts for sudo permissions when needed.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now, keeping Discord updated is literally a one-liner. Perfect, right?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;&#x2F;h2&gt;
&lt;p&gt;With this playbook, you&#x27;re one command away from keeping Discord updated effortlessly. Whether you&#x27;re installing it for the first time or just keeping up with their relentless update schedule, this playbook has you covered.&lt;&#x2F;p&gt;
&lt;p&gt;So, go ahead — run it, relax, and enjoy Fedora without the hassle. Because let&#x27;s face it: managing updates manually is so last year.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Moving to Fedora: Automating PowerShell Installation with Ansible</title>
        <published>2024-11-15T00:00:00+00:00</published>
        <updated>2024-11-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/posts/fedora-powershell-ansible/"/>
        <id>https://svnscha.de/posts/fedora-powershell-ansible/</id>
        
        <content type="html" xml:base="https://svnscha.de/posts/fedora-powershell-ansible/">&lt;h1 id=&quot;why-you-ask&quot;&gt;Why, You Ask?&lt;&#x2F;h1&gt;
&lt;p&gt;So, you&#x27;ve moved to Fedora and find yourself needing PowerShell — whether it&#x27;s for scripting, automation, or just that occasional &lt;code&gt;.ps1&lt;&#x2F;code&gt; nostalgia. But here&#x27;s the thing: installing PowerShell manually on one machine is annoying enough. Doing it on several workstations, VMs, devcontainers, or servers? Nope, not happening.&lt;&#x2F;p&gt;
&lt;p&gt;This is where Ansible comes in. With one playbook, you can automate the entire installation process, saving time and making your setups consistent across all environments. Let&#x27;s break it down.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-1-the-problem&quot;&gt;Step 1: The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;Installing PowerShell on Fedora involves downloading Microsoft&#x27;s repository package, registering it, updating the package index, and then installing the actual PowerShell package. It&#x27;s fine if you&#x27;re doing it once, but if you have to repeat the process on multiple systems, it quickly becomes a chore.&lt;&#x2F;p&gt;
&lt;p&gt;The solution? Use Ansible to do it for you. Write the playbook once, and it works everywhere — no matter how many machines you&#x27;re dealing with.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-2-the-playbook&quot;&gt;Step 2: The Playbook&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s the Ansible playbook that automates PowerShell installation on Fedora:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Install PowerShell on Fedora 41 using Ansible
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;hosts&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;localhost
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;become&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;yes
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;gather_facts&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tasks&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Download Microsoft repository package
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ansible.builtin.get_url&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;https:&#x2F;&#x2F;packages.microsoft.com&#x2F;config&#x2F;rhel&#x2F;8&#x2F;packages-microsoft-prod.rpm
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dest&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;tmp&#x2F;packages-microsoft-prod.rpm
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Register Microsoft repository
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ansible.builtin.command&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cmd&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;rpm -i &#x2F;tmp&#x2F;packages-microsoft-prod.rpm
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;creates&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;etc&#x2F;yum.repos.d&#x2F;microsoft-prod.repo
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Remove repository package after registration
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ansible.builtin.file&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;tmp&#x2F;packages-microsoft-prod.rpm
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;absent
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Update package index
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ansible.builtin.dnf&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;update_cache&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;yes
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;latest
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Install PowerShell
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ansible.builtin.dnf&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;powershell
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;present
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Verify PowerShell installation
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ansible.builtin.command&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cmd&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;pwsh --version
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;pwsh_version_output
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Display PowerShell version
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ansible.builtin.debug&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Installed PowerShell version: {{ pwsh_version_output.stdout }}&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;step-3-usage&quot;&gt;Step 3: Usage&lt;&#x2F;h2&gt;
&lt;p&gt;Running this playbook is straightforward. If you&#x27;re working with a virtual environment for Ansible, make sure it&#x27;s activated. Then, execute the playbook locally with the following command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ansible-playbook&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;path&#x2F;to&#x2F;install-powershell.yml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --connection&lt;&#x2F;span&gt;&lt;span&gt;=local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -K
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s a quick breakdown:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible-playbook&lt;&#x2F;code&gt;: Runs the playbook.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;path&#x2F;to&#x2F;install-powershell.yml&lt;&#x2F;code&gt;: Path to the playbook file.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--connection=local&lt;&#x2F;code&gt;: Executes the playbook on the local machine instead of a remote host.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-K&lt;&#x2F;code&gt;: Prompts for sudo privileges to perform the installation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With this command, you can easily install PowerShell on your Fedora system without worrying about missing steps.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;&#x2F;h2&gt;
&lt;p&gt;With this Ansible playbook, PowerShell installation on Fedora is no longer a manual, repetitive task. Whether you&#x27;re setting up new workstations, provisioning servers, or managing devcontainers, this automation makes the process painless.&lt;&#x2F;p&gt;
&lt;p&gt;So, the next time you&#x27;re staring down the prospect of yet another manual PowerShell install, let Ansible take care of it. Because honestly, you&#x27;ve got better things to do.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Where&#x27;s &#x2F;etc&#x2F;pve&#x2F;firewall&#x2F;cluster.fw in rescue images?</title>
        <published>2024-10-04T00:00:00+00:00</published>
        <updated>2024-10-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/posts/proxmox-rescue-firewall-disable/"/>
        <id>https://svnscha.de/posts/proxmox-rescue-firewall-disable/</id>
        
        <content type="html" xml:base="https://svnscha.de/posts/proxmox-rescue-firewall-disable/">&lt;h2 id=&quot;why-you-ask&quot;&gt;Why, You Ask?&lt;&#x2F;h2&gt;
&lt;p&gt;So, you&#x27;ve gone and locked yourself out of your Proxmox server, huh? Don&#x27;t worry, happens. Now you&#x27;re probably scrambling for a way back in before you fully comprehend that your own firewall rules have turned against you. But hey, no worries! Let&#x27;s break down this rescue operation step by step.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-1-mount-the-proxmox-system&quot;&gt;Step 1: Mount the Proxmox System&lt;&#x2F;h2&gt;
&lt;p&gt;First, you need to access your Proxmox filesystem. If you&#x27;re using LVM (Logical Volume Management), this step is pretty straightforward:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;mapper&#x2F;vg0-root &#x2F;mnt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With your filesystem mounted, chroot into it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;chroot&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;mnt&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you&#x27;re inside your system, ready to work some magic.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-2-disabling-the-firewall&quot;&gt;Step 2: Disabling the Firewall&lt;&#x2F;h2&gt;
&lt;p&gt;The firewall is likely what caused you to get locked out, so we&#x27;ll need to disable it temporarily. Run the following commands:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span&gt; disable pve-firewall
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span&gt; mask pve-firewall
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once you&#x27;ve done that, reboot the server. You should now be able to reconnect to your system normally, without the firewall cutting you off.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-3-fix-the-issue-and-restore-the-firewall&quot;&gt;Step 3: Fix the Issue and Restore the Firewall&lt;&#x2F;h2&gt;
&lt;p&gt;After fixing whatever issue got you locked out, it&#x27;s time to re-enable the firewall. Run these commands to restore it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span&gt; unmask pve-firewall
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span&gt; enable pve-firewall
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span&gt; start pve-firewall
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Your firewall should now be back up and running, but without the lockout problem.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-note-about-etc-pve-firewall-cluster-fw&quot;&gt;A Note About &lt;code&gt;&#x2F;etc&#x2F;pve&#x2F;firewall&#x2F;cluster.fw&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re hunting for &lt;code&gt;&#x2F;etc&#x2F;pve&#x2F;firewall&#x2F;cluster.fw&lt;&#x2F;code&gt; while in rescue mode, hoping it&#x27;s a typical file you can modify directly, you&#x27;re out of luck. This file is part of Proxmox&#x27;s cluster-wide configuration and is not stored as a regular file on the disk. Instead, it&#x27;s managed through Proxmox&#x27;s internal database, which is part of the &lt;a href=&quot;https:&#x2F;&#x2F;pve.proxmox.com&#x2F;wiki&#x2F;Proxmox_Cluster_File_System_(pmxcfs)&quot;&gt;Proxmox Cluster File System (pmxcfs)&lt;&#x2F;a&gt;. As such, it doesn&#x27;t exist as a standalone file you can access from rescue mode. To modify this configuration, you&#x27;ll need to regain full access to Proxmox and make changes from within the Proxmox interface or by editing it via the proper tools once you&#x27;re back online.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;&#x2F;h2&gt;
&lt;p&gt;And there you have it! With your system back up and running, and the firewall behaving, you can get back to managing your Proxmox server. Just be cautious next time you tweak the firewall rules — locking yourself out isn&#x27;t the most fun way to spend your day!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Simplify SSH</title>
        <published>2024-10-03T00:00:00+00:00</published>
        <updated>2024-10-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/posts/simplify-ssh/"/>
        <id>https://svnscha.de/posts/simplify-ssh/</id>
        
        <content type="html" xml:base="https://svnscha.de/posts/simplify-ssh/">&lt;h2 id=&quot;why-you-ask&quot;&gt;Why, You Ask?&lt;&#x2F;h2&gt;
&lt;p&gt;Every time I needed to SSH into a server, I&#x27;d be met with the same tedious ritual: entering my key passphrase again and again. You know the drill — open the terminal, type in your command, and boom! Another reminder that you still haven&#x27;t figured out how to make your SSH key work seamlessly. But why, you ask? Because apparently, I love to live dangerously on the edge of frustration.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;It&#x27;s time-consuming and frustrating. I&#x27;m tired of it.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;&#x2F;h2&gt;
&lt;p&gt;So, you&#x27;ve got your shiny new SSH key and every time you want to connect to a server, you&#x27;re greeted with that ever-familiar password prompt. Sure, typing your SSH key passphrase every time is good for security, but, come on — who wants to do that? I mean, I don&#x27;t know about you, but I&#x27;ve got enough passwords to remember without constantly dealing with this nonsense.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s save ourselves some time and effort by getting the SSH agent to remember our keys for us. That way, you can just run your commands like the seasoned developer you are without worrying about the whole &amp;quot;password entering&amp;quot; thing every single time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-1-start-the-ssh-agent&quot;&gt;Step 1: Start the SSH Agent&lt;&#x2F;h2&gt;
&lt;p&gt;First things first — let&#x27;s get the SSH agent up and running. It&#x27;s like your personal SSH butler, here to remember your key so you don&#x27;t have to.&lt;&#x2F;p&gt;
&lt;p&gt;Open up your terminal and type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;eval &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ssh-agent -s&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Boom! Now the agent is running in the background, ready to hold your keys like the responsible little daemon it is.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-2-add-your-key-to-the-ssh-agent&quot;&gt;Step 2: Add your key to the SSH Agent&lt;&#x2F;h2&gt;
&lt;p&gt;Now that the agent is up, let&#x27;s give it your key. You only need to do this once per session, and the agent will keep it ready for you.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ssh-add ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.ssh&#x2F;your_key
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Replace &lt;code&gt;your_key&lt;&#x2F;code&gt; with the actual name of your private key file (you know, the one you just painstakingly created). Now, enter your passphrase &lt;em&gt;just this one time&lt;&#x2F;em&gt; — I promise — and you&#x27;re set for the rest of your terminal session. No more typing that passphrase again and again.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-3-configure-your-ssh-setup-to-be-even-lazier-i-mean-efficient&quot;&gt;Step 3: Configure your SSH setup to be even lazier (I mean efficient)&lt;&#x2F;h2&gt;
&lt;p&gt;Okay, we&#x27;ve got the agent running and the key added, but we can take it one step further. Why not tell SSH exactly what key to use for which server, so you never have to worry about it picking the wrong one?&lt;&#x2F;p&gt;
&lt;p&gt;To do this, we&#x27;re going to set up a &lt;code&gt;~&#x2F;.ssh&#x2F;config&lt;&#x2F;code&gt; file. If you don&#x27;t have this file yet, don&#x27;t worry — it&#x27;s as easy as creating it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;touch ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.ssh&#x2F;config
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, crack open that file with your favorite text editor and set things up like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Host&lt;&#x2F;span&gt;&lt;span&gt; your-server-alias
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;HostName&lt;&#x2F;span&gt;&lt;span&gt; your.server.com
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt; your-username
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;IdentityFile ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.ssh&#x2F;your_key
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;IdentitiesOnly&lt;&#x2F;span&gt;&lt;span&gt; yes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;breaking-it-down&quot;&gt;Breaking it down&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Host&lt;&#x2F;strong&gt;: You can use any alias here that makes sense to you. This is what you&#x27;ll type when you want to connect to this server.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;HostName&lt;&#x2F;strong&gt;: The actual domain or IP address of the server.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;User&lt;&#x2F;strong&gt;: Your username on that server — this is where the &amp;quot;no more user mismatch&amp;quot; magic happens.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;IdentityFile&lt;&#x2F;strong&gt;: The path to your SSH private key.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;IdentitiesOnly yes&lt;&#x2F;strong&gt;: Tells SSH to use &lt;em&gt;only&lt;&#x2F;em&gt; this key, rather than trying every key it can find in the agent (which is how you avoid that annoying &amp;quot;user mismatch&amp;quot; issue).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;step-4-create-a-wrapper-script-for-ssh-agent-control&quot;&gt;Step 4: Create a wrapper script for SSH Agent control&lt;&#x2F;h2&gt;
&lt;p&gt;Alright, you want control over when your SSH agent starts up — totally understandable! Instead of running the agent automatically on login (which might feel a bit &lt;em&gt;too&lt;&#x2F;em&gt; autonomous), we&#x27;ll create a neat little wrapper script. You can trigger it whenever you feel like starting the agent and adding your SSH key for the session.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s how to set that up.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;create-the-wrapper-script&quot;&gt;Create the wrapper script&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s create a script that starts the SSH agent, adds your key, and gives you control over when it runs. We&#x27;ll call this script &lt;code&gt;init-ssh&lt;&#x2F;code&gt;, and we&#x27;ll stick it somewhere like &lt;code&gt;&#x2F;usr&#x2F;local&#x2F;bin&lt;&#x2F;code&gt; so it&#x27;s available from anywhere in your terminal.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create the script:&lt;&#x2F;strong&gt;
Open your terminal and create the &lt;code&gt;init-ssh&lt;&#x2F;code&gt; script:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; nano &#x2F;usr&#x2F;local&#x2F;bin&#x2F;init-ssh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add the script content:&lt;&#x2F;strong&gt;
Paste the following content into the file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Start the SSH agent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;eval &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ssh-agent -s&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Add the key to the agent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ssh-add ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.ssh&#x2F;your_key
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Optional: Display agent status for peace of mind
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ssh-add -l
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make the script executable:&lt;&#x2F;strong&gt;
Give the script executable permissions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;init-ssh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;how-to-use-the-script&quot;&gt;How to use the script&lt;&#x2F;h4&gt;
&lt;p&gt;Whenever you want to start your SSH agent for a session, just run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt; init-ssh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will start the agent, add your key, and show you a list of the keys currently loaded in the agent. You&#x27;ve got full control — start the agent when you want, stop it when you&#x27;re done, and enjoy a password-free SSH experience for the duration of that session.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;optional-stopping-the-ssh-agent&quot;&gt;Optional: Stopping the SSH Agent&lt;&#x2F;h3&gt;
&lt;p&gt;If you want to stop the SSH agent after you&#x27;re done with it, you can either let it die when you close your terminal or manually kill it with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;eval &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ssh-agent -k&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That way, you get all the convenience of an SSH agent when you need it, without it running indefinitely in the background. You&#x27;re now in complete control of your SSH setup, and you can keep things secure and efficient, exactly the way you like it.&lt;&#x2F;p&gt;
&lt;p&gt;Happy SSH&#x27;ing!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Simplify Elasticsearch and Kibana Installation</title>
        <published>2024-04-24T00:00:00+00:00</published>
        <updated>2024-04-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/posts/simplify-elasticsearch-kibana/"/>
        <id>https://svnscha.de/posts/simplify-elasticsearch-kibana/</id>
        
        <content type="html" xml:base="https://svnscha.de/posts/simplify-elasticsearch-kibana/">&lt;h2 id=&quot;why-you-ask&quot;&gt;Why, You Ask?&lt;&#x2F;h2&gt;
&lt;p&gt;Every time I set up a new instance of Elasticsearch and Kibana, the repetitive steps grated on me. Updating the system, configuring repositories, installing packages... surely there&#x27;s a better way? And thus, the quest for automation began. Not only to save my own time but to provide a robust foundation for others in the community facing the same tedious setup.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;It&#x27;s time-consuming and frustrating. I&#x27;m tired of it.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;automating-elasticsearch-and-kibana-setup-a-journey-to-simplicity&quot;&gt;Automating Elasticsearch and Kibana Setup: A Journey to Simplicity&lt;&#x2F;h2&gt;
&lt;p&gt;In our ever-expanding digital landscape, data is no longer just a resource; it&#x27;s an entire ecosystem. Managing this ecosystem efficiently requires robust tools like Elasticsearch and Kibana. But let&#x27;s be honest, the setup can be a drag! Inspired by my own need for simplification and a love for automating mundane tasks, I embarked on a journey to streamline this setup process. Let me walk you through how I created a bash script that sets up Elasticsearch and Kibana on a single-node cluster with minimal fuss.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-choose-a-bash-script&quot;&gt;Why Choose a Bash Script?&lt;&#x2F;h2&gt;
&lt;p&gt;You might be wondering why I opted for a Bash script over more sophisticated tools like Ansible. Well, the answer is straightforward: I appreciate simplicity. Bash scripts are incredibly versatile—perfect for cloud-init scripts in my homelab or even within Docker environments. This approach keeps things simple, avoiding the need for extra tools or complexities. It&#x27;s just easier that way!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;building-the-script-a-step-by-step-guide&quot;&gt;Building the Script: A Step-by-Step Guide&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s walk through the crafting of the script that automates setting up Elasticsearch and Kibana. Here&#x27;s how I pieced it together, one step at a time:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Checking for Superuser Privileges
Every great adventure starts with a little bit of power. What&#x27;s more powerful than starting off with full system access?&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;id -u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;)&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;0&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;This script must be run as root&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Updating the System and Installing Essential Packages
Think of this as prepping your car before a long road trip. A well-oiled machine avoids breakdowns, and that&#x27;s exactly what we&#x27;re aiming for—no surprises!&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span&gt; update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span&gt; install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; apt-transport-https gnupg curl jq
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;
&lt;p&gt;Adding the Elasticsearch Repository
Getting this right is like picking the perfect ingredients for a master chef recipe—it ensures the rest of the meal turns out just right.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Installing Elasticsearch and Kibana
This is where the transformation happens. What was once a bare-metal server soon becomes a powerful tool capable of sifting through vast amounts of data.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Configuring and Starting Services
The plot thickens! Setting up the services and getting them running is like reaching the climax of our story—where all elements come together to unveil the full potential of our setup.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Rather than churn out another cookie-cutter guide on setting up Elasticsearch and Kibana, you can view the complete script &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;svnscha&#x2F;676291c9e1cdbfa261202b3897afba37&quot;&gt;here&lt;&#x2F;a&gt;. However, I do want to emphasize the initial configuration process involving enrollment tokens and security settings. I&#x27;ve automated these aspects because, let&#x27;s face it, I&#x27;ve read too many guides that suggest just turning off security for the sake of simplicity. That&#x27;s not my style—I&#x27;d rather keep things secure automatically. It&#x27;s not rocket science, but it sure is critical. Why simplify by compromising security when you can automate it effectively, right?&lt;&#x2F;p&gt;
&lt;p&gt;This approach ensures you get the functionality you need without the hassle of manual setup or the risks of disabled security.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;perfecting-the-automation-securing-and-finalizing-the-setup&quot;&gt;Perfecting the Automation: Securing and Finalizing the Setup&lt;&#x2F;h2&gt;
&lt;p&gt;As we approach the climax of our automation journey, it&#x27;s all about ensuring that our Elasticsearch and Kibana setup not only functions but is also secured and ready for action. This part of the script is where the real magic happens—turning a fresh install into a secured and operational data exploration environment.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Broadcasting the Good News
First things first, let&#x27;s make sure any user logging into the system knows what&#x27;s been accomplished:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;-e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;=== init-vm.sh: Initial ===&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &#x2F;etc&#x2F;motd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;-e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;[&amp;gt; Elasticsearch &amp;#39;elastic&amp;#39; password: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ELASTIC_PASSWORD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &#x2F;etc&#x2F;motd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;-e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;[&amp;gt; Test instance with &amp;#39;curl -k -X GET https:&#x2F;&#x2F;elastic:$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ELASTIC_PASSWORD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;@localhost:9200&amp;#39;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &#x2F;etc&#x2F;motd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;-e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;=== init-vm.sh: Get started ===&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &#x2F;etc&#x2F;motd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;-e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;[&amp;gt; Reset &amp;#39;elastic&amp;#39; password with &amp;#39;&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;bin&#x2F;elasticsearch-reset-password -u elastic&amp;#39;.&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &#x2F;etc&#x2F;motd
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, we&#x27;re updating the message of the day (MOTD) file to ensure anyone who logs in is immediately informed about how to interact with Elasticsearch and what steps to take next. It&#x27;s like leaving a note on the fridge - impossible to ignore and incredibly helpful.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Decoding the Secrets
Automation isn&#x27;t just about doing things without human intervention; it&#x27;s also about doing them securely and wisely:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Because who likes doing setup manually, right?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;decoded_token&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;KIBANA_ENROLLMENT_TOKEN &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;base64 --decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;address&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;decoded_token &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;jq -r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;.adr[0]&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fingerprint&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;decoded_token &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;jq -r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;.fgr&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;api_key&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;decoded_token &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;jq -r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;.key&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Decoding the enrollment token reveals the essential elements needed to securely configure Kibana: the address, fingerprint, and API key.&lt;&#x2F;p&gt;
&lt;p&gt;Harnessing Version and Build Information
Knowing exactly which version and build of Kibana you&#x27;re working with is required for the API, so let&#x27;s get that:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ver&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;jq -r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;.version&amp;#39; &#x2F;usr&#x2F;share&#x2F;kibana&#x2F;package.json)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;jq -r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;.build.number&amp;#39; &#x2F;usr&#x2F;share&#x2F;kibana&#x2F;package.json)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Re-encoding and Verification
Secrecy is paramount, and so is verification. Here&#x27;s how we handle both:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;encoded_api_key&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;-n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;api_key &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;base64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; &#x2F;usr&#x2F;share&#x2F;kibana&#x2F;bin&#x2F;kibana-verification-code)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;verification_code&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;output &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;awk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;: &amp;quot; &amp;#39;{print $2}&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;s&#x2F; &#x2F;&#x2F;g&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The API key needs to be re-encoded to maintain security, and we also extract a verification code necessary for the next step—enrolling Kibana.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-final-act-enrolling-kibana&quot;&gt;The Final Act: Enrolling Kibana&lt;&#x2F;h2&gt;
&lt;p&gt;And now, the final piece of our automation puzzle:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;curl -k -v -X&lt;&#x2F;span&gt;&lt;span&gt; POST &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;localhost:5601&#x2F;internal&#x2F;interactive_setup&#x2F;enroll&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;     -H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Accept: *&#x2F;*&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;     -H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Content-Type: application&#x2F;json&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;     -H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Host: localhost:5601&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;     -H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Origin: http:&#x2F;&#x2F;localhost:5601&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;     -H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Referer: http:&#x2F;&#x2F;localhost:5601&#x2F;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;     -H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;kbn-build-number: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;     -H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;kbn-version: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;     -H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;x-elastic-internal-origin: Kibana&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;     -H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;x-kbn-context: %7B%22type%22%3A%22application%22%2C%22name%22%3A%22interactiveSetup%22%2C%22url%22%3A%22%2F%22%7D&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;     -d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;{&amp;quot;hosts&amp;quot;:[&amp;quot;https:&#x2F;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;address&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;&amp;quot;],&amp;quot;apiKey&amp;quot;:&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;encoded_api_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;&amp;quot;,&amp;quot;caFingerprint&amp;quot;:&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fingerprint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;&amp;quot;,&amp;quot;code&amp;quot;:&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;verification_code&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;&amp;quot;}&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This curl command not only sends all the needed parameters to Kibana for configuration but also uses the verification code to ensure that the setup is both authorized and secure. It&#x27;s akin to dotting the i&#x27;s and crossing the t&#x27;s in our setup script.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;&#x2F;h3&gt;
&lt;p&gt;From the mundane to the technical, every line of code we&#x27;ve added builds towards making Elasticsearch and Kibana not just operational but secured and ready for whatever data you throw at it. Feel free to dive into the full script, tweak it, use it, and share it. After all, isn&#x27;t the whole point of automation to make life a bit easier?&lt;&#x2F;p&gt;
&lt;p&gt;Check out the complete script here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;svnscha&#x2F;676291c9e1cdbfa261202b3897afba37&quot;&gt;init-elastic-search-kibana-vm.sh&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Happy automating, and here&#x27;s to many insightful data explorations!&lt;&#x2F;p&gt;
&lt;p&gt;P.S.: This script is tailored for automating development environments. Remember, a single-node cluster isn’t suited for production use, and storing passwords in the message of the day (MOTD) file? That’s a no-go for serious deployments. 😏&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Simplify Visual Studio Installation</title>
        <published>2024-02-12T00:00:00+00:00</published>
        <updated>2024-02-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/posts/simplify-vs/"/>
        <id>https://svnscha.de/posts/simplify-vs/</id>
        
        <content type="html" xml:base="https://svnscha.de/posts/simplify-vs/">&lt;h2 id=&quot;why-you-ask&quot;&gt;Why, You Ask?&lt;&#x2F;h2&gt;
&lt;p&gt;Every year, like clockwork, I find myself setting up my local dev environment from scratch. And every time, it&#x27;s the same old song and dance: downloading, installing, configuring.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;It&#x27;s time-consuming and frustrating. I&#x27;m tired of it.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-it-be-easier&quot;&gt;Can It Be Easier?&lt;&#x2F;h2&gt;
&lt;p&gt;What if setting up a new machine, rolling it back, or tweaking it could be as simple as running a build on a server? What if I told you we could apply the same principles of automation to our local setups?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;let-s-find-a-solution&quot;&gt;Let&#x27;s Find A Solution&lt;&#x2F;h2&gt;
&lt;p&gt;Creating a new development environment shouldn&#x27;t be a chore. It should be quick, painless, and even a little bit fun. To turn this dream into reality, I need two things: the right software and the perfect setup. That&#x27;s where &lt;code&gt;winget&lt;&#x2F;code&gt; and &lt;code&gt;.vsconfig&lt;&#x2F;code&gt; come in.&lt;&#x2F;p&gt;
&lt;p&gt;With a list of essential software and some PowerShell tricks, I began to make boring tasks automatic. I picked each program, from 7Zip to Visual Studio, for its important use. But the adventure of automating everything is a story for another time.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;streamlining-visual-studio-installation&quot;&gt;Streamlining Visual Studio Installation&lt;&#x2F;h3&gt;
&lt;p&gt;My main event? Automating Visual Studio installation. Using &lt;code&gt;winget&lt;&#x2F;code&gt;, I can install Visual Studio with just a line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;winget install -e --id Microsoft.VisualStudio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2022.&lt;&#x2F;span&gt;&lt;span&gt;Enterprise --silent
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But I didn&#x27;t stop there. With the &lt;code&gt;--override&lt;&#x2F;code&gt; flag, I tailored the installation to include specific workloads, like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;winget install -e --id Microsoft.VisualStudio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2022.&lt;&#x2F;span&gt;&lt;span&gt;Enterprise --silent --override &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;--wait --quiet --addProductLang En-us --config C:\vs2022.vsconfig&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This method sets up Visual Studio with the workload I need without having to manually select each package.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;what-s-vsconfig&quot;&gt;What&#x27;s &lt;code&gt;.vsconfig&lt;&#x2F;code&gt;?&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;.vsconfig&lt;&#x2F;code&gt; helps me easily replicate my development environment wherever I am. It&#x27;s a JSON file that, with just a few clicks in the Visual Studio Installer, allows me to compress my environment workloads into a neat package. This approach is not only perfect for keeping &lt;strong&gt;build servers&lt;&#x2F;strong&gt; and &lt;strong&gt;personal development environments in sync&lt;&#x2F;strong&gt; with identical workloads, but it also simplifies sharing updates and changes with teammates.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Example: vs2022.vsconfig&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;version&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;1.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;components&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.Roslyn.Compiler&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.Component.MSBuild&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.Roslyn.LanguageServices&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.SQL.LocalDB.Runtime&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.CoreEditor&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Workload.CoreEditor&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.TypeScript.TSServer&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.ComponentGroup.WebToolsExtensions&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.JavaScript.TypeScript&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.TextTemplating&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.NuGet&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.IntelliTrace.FrontEnd&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.Debugger.JustInTime&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Component.Microsoft.VisualStudio.LiveShare.2022&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.IntelliCode&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.ClassDesigner&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.GraphDocument&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.CodeMap&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.VC.CoreIde&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.VC.Tools.x86.x64&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.Graphics.Tools&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.VC.DiagnosticTools&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.Windows11SDK.22621&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.VC.ATL&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.SecurityIssueAnalysis&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.ComponentGroup.ArchitectureTools.Native&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.VC.Redist.14.Latest&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Core&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.Windows11Sdk.WindowsPerformanceToolkit&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.CppBuildInsights&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.ComponentGroup.WebToolsExtensions.CMake&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.VC.CMake.Project&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.VC.TestAdapterForBoostTest&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.VC.TestAdapterForGoogleTest&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.VC.ASAN&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.Vcpkg&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.VC.Tools.ARM64EC&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Workload.NativeDesktop&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Microsoft.VisualStudio.Component.VC.Runtimes.ARM64EC.Spectre&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can create a .vsconfig file with these easy steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Launch the Visual Studio Installer and choose to modify your setup.&lt;&#x2F;li&gt;
&lt;li&gt;Hit More and then select the option to Export your settings into a .vsconfig file.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;That&#x27;s it!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-bother-with-all-this&quot;&gt;Why Bother With All This?&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;m all about making life easier, not harder. Thanks to &lt;code&gt;winget&lt;&#x2F;code&gt; and Visual Studio&#x27;s &lt;code&gt;.vsconfig&lt;&#x2F;code&gt;, what used to eat up a lot of time now takes no time at all.&lt;&#x2F;p&gt;
&lt;p&gt;Setting up a fresh development environment is now a piece of cake - and I mean the kind of delicious cake you can buy ready-made but tastes as good as anything you&#x27;d bake yourself. So here&#x27;s to spending less time on setup and more on the fun stuff: coding.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Blog Motivation</title>
        <published>2024-02-10T00:00:00+00:00</published>
        <updated>2024-02-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://svnscha.de/posts/blog-motivation/"/>
        <id>https://svnscha.de/posts/blog-motivation/</id>
        
        <content type="html" xml:base="https://svnscha.de/posts/blog-motivation/">&lt;h2 id=&quot;why-you-ask&quot;&gt;Why, You Ask?&lt;&#x2F;h2&gt;
&lt;p&gt;We all have those annoying little tasks that pop up a few times a year. They&#x27;re too rare to make fixing them a big deal but happen just enough to be really annoying. Think about setting up a new laptop, sorting out files, refactor that &lt;code&gt;NULL&lt;&#x2F;code&gt; to &lt;code&gt;nullptr&lt;&#x2F;code&gt; or those updates that take forever. It eats up time and patience. &lt;strong&gt;I&#x27;m tired of it.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;changing-things-up&quot;&gt;Changing Things Up&lt;&#x2F;h2&gt;
&lt;p&gt;I started this blog not just to talk tech but to tackle these annoying moments head-on. My goal? To stop saying &lt;em&gt;&amp;quot;it&#x27;s not worth fixing&amp;quot;&lt;&#x2F;em&gt; and start finding ways to make these tasks less of a headache. Even those things we do once in a blue moon? Yeah, I want to automate those too. And I&#x27;ll share every step right here.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-i-share&quot;&gt;Why I Share&lt;&#x2F;h2&gt;
&lt;p&gt;This blog is my playground and my megaphone. It&#x27;s where I try out new ideas to make life easier and then shout out what works. Each post starts with my cheeky&lt;&#x2F;p&gt;
&lt;center&gt;&quot;Why, You Ask?&quot;&lt;&#x2F;center&gt;
&lt;p&gt;and always circles back to me spilling the beans on how I truly feel, which usually is&lt;&#x2F;p&gt;
&lt;center&gt;&quot;I&#x27;m tired of it.&quot;&lt;&#x2F;center&gt;
&lt;p&gt;It&#x27;s my unique approach, sprinkled with a dash of sarcasm, as I navigate through the mayhem, assuring you that behind every vent, there&#x27;s a solid reason and, believe it or not, a solution waiting to be uncovered.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;it-s-not-just-about-being-lazy&quot;&gt;It&#x27;s Not Just About Being Lazy&lt;&#x2F;h2&gt;
&lt;p&gt;But there&#x27;s more to it. It&#x27;s not just about making things easier. It&#x27;s about sharing knowledge, opinions, and sometimes just a good rant. If I find something cool or a smart way to dodge those digital chores, I&#x27;ll put it here. It&#x27;s about helping each other out, sparking new ideas, and maybe making you think, &amp;quot;Hey, I&#x27;ve been there too!&amp;quot;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;come-along-for-the-ride&quot;&gt;Come Along for the Ride&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re nodding along, thinking of your own digital chores, this is the place for you. Dive into the tricks I&#x27;ve found, share your thoughts, or just enjoy knowing you&#x27;re not the only one who gets fed up. Let&#x27;s make those time-sucking tasks history, together.&lt;&#x2F;p&gt;
&lt;p&gt;Welcome to my quest for a smoother, simpler tech life. Here&#x27;s to less frustration and more time doing what we love. Let&#x27;s kick those annoying tasks to the curb.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
